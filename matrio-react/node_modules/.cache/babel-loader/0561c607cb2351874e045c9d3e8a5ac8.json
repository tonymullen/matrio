{"ast":null,"code":"import { Client } from 'boardgame.io/react';\nimport { Game } from 'boardgame.io/core';\nimport { AI } from 'boardgame.io/ai';\nimport { MatrioBoard } from './components/MatrioBoard';\nimport { DealerService } from './services/DealerService';\nimport { Card } from './shared/Card';\nimport { Dot } from './shared/Dot';\nconst dealer = new DealerService();\nconst Matrio = Game({\n  setup: () => ({\n    dots: dots,\n    leftMatrix: leftMatrix,\n    topMatrix: topMatrix,\n    prodMatrix: Array(9).fill(null),\n    playerCards: playerCards,\n    players: ['south', 'west', 'north', 'east'],\n    canDropCard: canDropCard\n  }),\n  moves: {\n    placeCard(G, ctx, cardname, row, col, matrix) {\n      let playerName = G.players[ctx.currentPlayer]; //console.log(playerName + \" places card\");\n      //if (playerName === 'south') {\n\n      G.playerCards[\"south\"] = G.playerCards[\"south\"].filter(i => {\n        return i.name !== cardname;\n      });\n      G[matrix][col][row] = name_card[cardname];\n      updateDots(G, playerName); //}\n    }\n\n  },\n  flow: {\n    movesPerTurn: 1,\n    onTurnEnd: (G, ctx) => {\n      console.log(\"Turn has ended\");\n    },\n    onMove: (G, ctx) => {\n      console.log(\"Move made\");\n    },\n    endGameIf: (G, ctx) => {\n      let done = true;\n      let totals = {\n        \"south\": 0,\n        \"west\": 0,\n        \"north\": 0,\n        \"east\": 0,\n        \"nobody\": 0\n      };\n\n      for (let p = 0; p < 4; p++) {\n        if (G.playerCards[G.players[p]].length > 0) {\n          done = false;\n        }\n\n        if (done) {\n          for (let i = 0; i < 3; i++) {\n            for (let j = 0; j < 3; j++) {\n              totals[G.dots[i][j].player] += G.dots[i][j].score;\n            }\n          }\n        }\n      }\n\n      let scoresList = [];\n\n      for (var player in totals) {\n        scoresList.push([player, totals[player]]);\n      }\n\n      scoresList.sort(function (a, b) {\n        return b[1] - a[1];\n      });\n\n      if (IsVictory(scoresList)) {\n        return {\n          winner: scoresList[0][0]\n        };\n      }\n\n      if (IsDraw(scoresList)) {\n        return {\n          draw: true\n        };\n      }\n    }\n  }\n});\nconst App = Client({\n  game: Matrio,\n  board: MatrioBoard,\n  ai: AI({\n    bot: AI.RandomBot,\n    enumerate: (G, ctx) => {\n      let playerName = G.players[ctx.currentPlayer];\n      let cards = G.playerCards[playerName];\n      let moves = [];\n\n      for (let i = 0; i < cards.length; i++) {\n        let cardname = cards[i].face + \"_\" + cards[i].suit; // add leftMatrix moves\n\n        for (let row = 0; row < 3; row++) {\n          for (let col = 0; col < 4; col++) {\n            // canDropCard(G, matrix, i, j, draggedCardName)\n            if (canDropCard(G, leftMatrix, row, col, cardname)) {\n              moves.push({\n                move: 'placeCard',\n                args: [cardname, row, col, 'leftMatrix']\n              });\n            }\n          }\n        } // add topMatrix moves\n        // for (let col = 0; col < 3; col++) {\n        //   for (let row = 0; row < 4; row++) {\n        //   }\n        // }\n        //         if (G.cells[i] === null) {\n        //           moves.push({\n        //             // placeCard(G, ctx, player, cardname, row, col, matrix)\n        //  //           move: 'placeCard', args: [cardname, row, col, matrix]\n        //           });\n        //         }\n\n      } //return moves.slice(0,2);\n\n\n      return moves;\n    }\n  }),\n  debug: true,\n  numPlayers: 4,\n  images: importCardImages()\n});\n\nfunction IsVictory(scoresList) {\n  return scoresList[0] > scoresList[1];\n} // Return true if all cells are occupied\n\n\nfunction IsDraw(scoresList) {\n  // return cells.filter(c => c === null).length === 0;\n  return scoresList[0] == scoresList[1];\n}\n\nconst leftMatrix = [[new Card('spade', 'blank'), new Card('spade', 'blank'), new Card('spade', 'blank')], [new Card('diamond', 'blank'), new Card('diamond', 'blank'), new Card('diamond', 'blank')], [new Card('club', 'blank'), new Card('club', 'blank'), new Card('club', 'blank')], [new Card('heart', 'blank'), new Card('heart', 'blank'), new Card('heart', 'blank')]];\nconst topMatrix = [[new Card('spade', 'blank'), new Card('spade', 'blank'), new Card('spade', 'blank')], [new Card('diamond', 'blank'), new Card('diamond', 'blank'), new Card('diamond', 'blank')], [new Card('club', 'blank'), new Card('club', 'blank'), new Card('club', 'blank')], [new Card('heart', 'blank'), new Card('heart', 'blank'), new Card('heart', 'blank')]];\nconst name_card = {};\ndealer.deck.forEach(card => {\n  name_card[card.name] = card;\n});\nconst playerCards = {\n  \"north\": dealer.deck.slice(0, 13),\n  \"south\": dealer.deck.slice(13, 26),\n  \"east\": dealer.deck.slice(26, 39),\n  \"west\": dealer.deck.slice(39, 52)\n};\nconst dots = [[new Dot('nobody', null), new Dot('nobody', null), new Dot('nobody', null)], [new Dot('nobody', null), new Dot('nobody', null), new Dot('nobody', null)], [new Dot('nobody', null), new Dot('nobody', null), new Dot('nobody', null)]];\n\nfunction updateDots(G, player) {\n  let leftColumn = 0;\n  let leftRow = 0;\n  let topColumn = 0;\n  let topRow = 0;\n\n  for (leftRow = 0; leftRow < 3; leftRow++) {\n    let filledrows = true;\n\n    for (leftColumn = 0; leftColumn < 3; leftColumn++) {\n      if (G.leftMatrix[leftColumn][leftRow].face === 'blank') {\n        filledrows = false;\n      }\n    }\n\n    if (filledrows) {\n      for (topColumn = 0; topColumn < 3; topColumn++) {\n        let filledcolumns = true;\n\n        for (topRow = 0; topRow < 4; topRow++) {\n          console.log(G.leftMatrix[topRow][topColumn].face);\n\n          if (G.topMatrix[topRow][topColumn].face === 'blank') {\n            filledcolumns = false;\n          }\n        }\n\n        if (filledcolumns) {\n          if (G.dots[leftRow][topColumn].player === 'nobody') {\n            G.dots[leftRow][topColumn] = new Dot(player, getDotProduct(G, leftRow, topColumn));\n          } else {\n            G.dots[leftRow][topColumn].score = getDotProduct(G, leftRow, topColumn);\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction getDotProduct(G, leftRow, topColumn) {\n  let dp = 0;\n\n  for (let i = 0; i < 4; i++) {\n    dp += G.leftMatrix[i][leftRow].value * G.topMatrix[i][topColumn].value;\n  }\n\n  return dp;\n}\n\nfunction canDropCard(G, matrix, i, j, draggedCardName) {\n  let draggedCardFaceAndSuit = draggedCardName.split('_');\n  let draggedFace = draggedCardFaceAndSuit[0];\n  let draggedSuit = draggedCardFaceAndSuit[1];\n  let matchesBlank = matrix[j][i].face === 'blank' && matrix[j][i].suit === draggedSuit;\n  let notBlank = matrix[j][i].face !== 'blank';\n  let notBlankAndTraysFull = notBlank && suitTraysFull(G, draggedSuit);\n  return draggedFace === 'joker' || matchesBlank || notBlankAndTraysFull;\n}\n\nfunction suitTraysFull(G, suit) {\n  let suits = ['spade', 'diamond', 'club', 'heart'];\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (suits[j] === suit) {\n        if (G.leftMatrix[j][i].face === 'blank' || G.topMatrix[j][i].face === 'blank') {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction importCardImages() {\n  let r = require.context('./assets/cards/', false, /\\.png$/);\n\n  let images = {};\n  r.keys().forEach(item => {\n    images[item.replace('./', '').replace('.png', '')] = r(item);\n  });\n  return images;\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/tonymullen/Dropbox/Programming/Node/BoardgameIO/matrio/src/App.js"],"names":["Client","Game","AI","MatrioBoard","DealerService","Card","Dot","dealer","Matrio","setup","dots","leftMatrix","topMatrix","prodMatrix","Array","fill","playerCards","players","canDropCard","moves","placeCard","G","ctx","cardname","row","col","matrix","playerName","currentPlayer","filter","i","name","name_card","updateDots","flow","movesPerTurn","onTurnEnd","console","log","onMove","endGameIf","done","totals","p","length","j","player","score","scoresList","push","sort","a","b","IsVictory","winner","IsDraw","draw","App","game","board","ai","bot","RandomBot","enumerate","cards","face","suit","move","args","debug","numPlayers","images","importCardImages","deck","forEach","card","slice","leftColumn","leftRow","topColumn","topRow","filledrows","filledcolumns","getDotProduct","dp","value","draggedCardName","draggedCardFaceAndSuit","split","draggedFace","draggedSuit","matchesBlank","notBlank","notBlankAndTraysFull","suitTraysFull","suits","r","require","context","keys","item","replace"],"mappings":"AAAA,SAASA,MAAT,QAAuB,oBAAvB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,EAAT,QAAmB,iBAAnB;AAEA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,SAASC,GAAT,QAAoB,cAApB;AAGA,MAAMC,MAAM,GAAG,IAAIH,aAAJ,EAAf;AAEA,MAAMI,MAAM,GAAGP,IAAI,CAAC;AAClBQ,EAAAA,KAAK,EAAE,OAAO;AACZC,IAAAA,IAAI,EAAEA,IADM;AAEZC,IAAAA,UAAU,EAAEA,UAFA;AAGZC,IAAAA,SAAS,EAAEA,SAHC;AAIZC,IAAAA,UAAU,EAAEC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAJA;AAKZC,IAAAA,WAAW,EAAEA,WALD;AAMZC,IAAAA,OAAO,EAAE,CAAC,OAAD,EAAU,MAAV,EAAkB,OAAlB,EAA2B,MAA3B,CANG;AAOZC,IAAAA,WAAW,EAAEA;AAPD,GAAP,CADW;AASlBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,SAAS,CAACC,CAAD,EAAIC,GAAJ,EAASC,QAAT,EAAmBC,GAAnB,EAAwBC,GAAxB,EAA6BC,MAA7B,EAAqC;AAC5C,UAAIC,UAAU,GAAGN,CAAC,CAACJ,OAAF,CAAUK,GAAG,CAACM,aAAd,CAAjB,CAD4C,CAE5C;AACA;;AACEP,MAAAA,CAAC,CAACL,WAAF,CAAc,OAAd,IAAyBK,CAAC,CAACL,WAAF,CAAc,OAAd,EAAuBa,MAAvB,CAA+BC,CAAD,IAAO;AAC5D,eAAOA,CAAC,CAACC,IAAF,KAAWR,QAAlB;AACD,OAFwB,CAAzB;AAGAF,MAAAA,CAAC,CAACK,MAAD,CAAD,CAAUD,GAAV,EAAeD,GAAf,IAAsBQ,SAAS,CAACT,QAAD,CAA/B;AACAU,MAAAA,UAAU,CAACZ,CAAD,EAAIM,UAAJ,CAAV,CAR0C,CAS5C;AACD;;AAXI,GATW;AAsBlBO,EAAAA,IAAI,EAAE;AACJC,IAAAA,YAAY,EAAE,CADV;AAEJC,IAAAA,SAAS,EAAE,CAACf,CAAD,EAAIC,GAAJ,KAAY;AACrBe,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD,KAJG;AAKJC,IAAAA,MAAM,EAAE,CAAClB,CAAD,EAAIC,GAAJ,KAAY;AAClBe,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD,KAPG;AAQJE,IAAAA,SAAS,EAAE,CAACnB,CAAD,EAAIC,GAAJ,KAAY;AACrB,UAAImB,IAAI,GAAG,IAAX;AACA,UAAIC,MAAM,GAAG;AACX,iBAAU,CADC;AAEX,gBAAS,CAFE;AAGX,iBAAU,CAHC;AAIX,gBAAS,CAJE;AAKX,kBAAW;AALA,OAAb;;AAQA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,YAAItB,CAAC,CAACL,WAAF,CAAcK,CAAC,CAACJ,OAAF,CAAU0B,CAAV,CAAd,EAA4BC,MAA5B,GAAqC,CAAzC,EAA2C;AACzCH,UAAAA,IAAI,GAAG,KAAP;AACD;;AACD,YAAIA,IAAJ,EAAU;AACR,eAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,iBAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BH,cAAAA,MAAM,CAACrB,CAAC,CAACX,IAAF,CAAOoB,CAAP,EAAUe,CAAV,EAAaC,MAAd,CAAN,IAA+BzB,CAAC,CAACX,IAAF,CAAOoB,CAAP,EAAUe,CAAV,EAAaE,KAA5C;AACD;AACF;AACF;AACF;;AAED,UAAIC,UAAU,GAAG,EAAjB;;AAEA,WAAK,IAAIF,MAAT,IAAmBJ,MAAnB,EAA2B;AACzBM,QAAAA,UAAU,CAACC,IAAX,CAAgB,CAACH,MAAD,EAASJ,MAAM,CAACI,MAAD,CAAf,CAAhB;AACD;;AAEDE,MAAAA,UAAU,CAACE,IAAX,CAAgB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC7B,eAAOA,CAAC,CAAC,CAAD,CAAD,GAAOD,CAAC,CAAC,CAAD,CAAf;AACD,OAFD;;AAIA,UAAIE,SAAS,CAACL,UAAD,CAAb,EAA2B;AACzB,eAAO;AAAEM,UAAAA,MAAM,EAAEN,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd;AAAV,SAAP;AACD;;AACD,UAAIO,MAAM,CAACP,UAAD,CAAV,EAAwB;AACtB,eAAO;AAAEQ,UAAAA,IAAI,EAAE;AAAR,SAAP;AACD;AACF;AA/CG;AAtBY,CAAD,CAAnB;AAyEA,MAAMC,GAAG,GAAGzD,MAAM,CAAC;AACjB0D,EAAAA,IAAI,EAAElD,MADW;AAEjBmD,EAAAA,KAAK,EAAExD,WAFU;AAGjByD,EAAAA,EAAE,EAAE1D,EAAE,CAAC;AACL2D,IAAAA,GAAG,EAAE3D,EAAE,CAAC4D,SADH;AAELC,IAAAA,SAAS,EAAE,CAAC1C,CAAD,EAAIC,GAAJ,KAAY;AACrB,UAAIK,UAAU,GAAGN,CAAC,CAACJ,OAAF,CAAUK,GAAG,CAACM,aAAd,CAAjB;AACA,UAAIoC,KAAK,GAAG3C,CAAC,CAACL,WAAF,CAAcW,UAAd,CAAZ;AACA,UAAIR,KAAK,GAAG,EAAZ;;AACA,WAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkC,KAAK,CAACpB,MAA1B,EAAkCd,CAAC,EAAnC,EAAuC;AACrC,YAAIP,QAAQ,GAAGyC,KAAK,CAAClC,CAAD,CAAL,CAASmC,IAAT,GAAgB,GAAhB,GAAsBD,KAAK,CAAClC,CAAD,CAAL,CAASoC,IAA9C,CADqC,CAErC;;AACA,aAAK,IAAI1C,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,CAAxB,EAA2BA,GAAG,EAA9B,EAAkC;AAChC,eAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,CAAxB,EAA2BA,GAAG,EAA9B,EAAkC;AAChC;AACA,gBAAIP,WAAW,CAACG,CAAD,EAAIV,UAAJ,EAAgBa,GAAhB,EAAqBC,GAArB,EAA0BF,QAA1B,CAAf,EAAmD;AACjDJ,cAAAA,KAAK,CAAC8B,IAAN,CAAW;AACTkB,gBAAAA,IAAI,EAAE,WADG;AACUC,gBAAAA,IAAI,EAAE,CAAC7C,QAAD,EAAWC,GAAX,EAAgBC,GAAhB,EAAqB,YAArB;AADhB,eAAX;AAGD;AACF;AACF,SAZoC,CAarC;AACA;AACA;AAEA;AACA;AAER;AACA;AACA;AACA;AACA;AACA;;AACO,OA9BoB,CA+BrB;;;AACA,aAAON,KAAP;AACD;AAnCI,GAAD,CAHW;AAwCjBkD,EAAAA,KAAK,EAAE,IAxCU;AAyCjBC,EAAAA,UAAU,EAAE,CAzCK;AA0CjBC,EAAAA,MAAM,EAAEC,gBAAgB;AA1CP,CAAD,CAAlB;;AA6CA,SAASnB,SAAT,CAAmBL,UAAnB,EAA+B;AAC7B,SAAOA,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAAC,CAAD,CAAjC;AACD,C,CAED;;;AACA,SAASO,MAAT,CAAgBP,UAAhB,EAA4B;AAC1B;AACA,SAAOA,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAlC;AACD;;AAED,MAAMrC,UAAU,GAAG,CACL,CAAC,IAAIN,IAAJ,CAAS,OAAT,EAAkB,OAAlB,CAAD,EACA,IAAIA,IAAJ,CAAS,OAAT,EAAkB,OAAlB,CADA,EAEA,IAAIA,IAAJ,CAAS,OAAT,EAAkB,OAAlB,CAFA,CADK,EAIL,CAAC,IAAIA,IAAJ,CAAS,SAAT,EAAoB,OAApB,CAAD,EACA,IAAIA,IAAJ,CAAS,SAAT,EAAoB,OAApB,CADA,EAEA,IAAIA,IAAJ,CAAS,SAAT,EAAoB,OAApB,CAFA,CAJK,EAOL,CAAC,IAAIA,IAAJ,CAAS,MAAT,EAAiB,OAAjB,CAAD,EACA,IAAIA,IAAJ,CAAS,MAAT,EAAiB,OAAjB,CADA,EAEA,IAAIA,IAAJ,CAAS,MAAT,EAAiB,OAAjB,CAFA,CAPK,EAUL,CAAC,IAAIA,IAAJ,CAAS,OAAT,EAAkB,OAAlB,CAAD,EACA,IAAIA,IAAJ,CAAS,OAAT,EAAkB,OAAlB,CADA,EAEA,IAAIA,IAAJ,CAAS,OAAT,EAAkB,OAAlB,CAFA,CAVK,CAAnB;AAcA,MAAMO,SAAS,GAAG,CACJ,CAAC,IAAIP,IAAJ,CAAS,OAAT,EAAkB,OAAlB,CAAD,EACA,IAAIA,IAAJ,CAAS,OAAT,EAAkB,OAAlB,CADA,EAEA,IAAIA,IAAJ,CAAS,OAAT,EAAkB,OAAlB,CAFA,CADI,EAIJ,CAAC,IAAIA,IAAJ,CAAS,SAAT,EAAoB,OAApB,CAAD,EACA,IAAIA,IAAJ,CAAS,SAAT,EAAoB,OAApB,CADA,EAEA,IAAIA,IAAJ,CAAS,SAAT,EAAoB,OAApB,CAFA,CAJI,EAOJ,CAAC,IAAIA,IAAJ,CAAS,MAAT,EAAiB,OAAjB,CAAD,EACA,IAAIA,IAAJ,CAAS,MAAT,EAAiB,OAAjB,CADA,EAEA,IAAIA,IAAJ,CAAS,MAAT,EAAiB,OAAjB,CAFA,CAPI,EAUJ,CAAC,IAAIA,IAAJ,CAAS,OAAT,EAAkB,OAAlB,CAAD,EACA,IAAIA,IAAJ,CAAS,OAAT,EAAkB,OAAlB,CADA,EAEA,IAAIA,IAAJ,CAAS,OAAT,EAAkB,OAAlB,CAFA,CAVI,CAAlB;AAeA,MAAM2B,SAAS,GAAG,EAAlB;AACAzB,MAAM,CAACkE,IAAP,CAAYC,OAAZ,CAAoBC,IAAI,IAAI;AAC1B3C,EAAAA,SAAS,CAAC2C,IAAI,CAAC5C,IAAN,CAAT,GAAuB4C,IAAvB;AACD,CAFD;AAIA,MAAM3D,WAAW,GAAG;AAChB,WAAST,MAAM,CAACkE,IAAP,CAAYG,KAAZ,CAAkB,CAAlB,EAAoB,EAApB,CADO;AAEhB,WAASrE,MAAM,CAACkE,IAAP,CAAYG,KAAZ,CAAkB,EAAlB,EAAsB,EAAtB,CAFO;AAGhB,UAAQrE,MAAM,CAACkE,IAAP,CAAYG,KAAZ,CAAkB,EAAlB,EAAsB,EAAtB,CAHQ;AAIhB,UAAQrE,MAAM,CAACkE,IAAP,CAAYG,KAAZ,CAAkB,EAAlB,EAAsB,EAAtB;AAJQ,CAApB;AAOA,MAAMlE,IAAI,GAAG,CACX,CAAC,IAAIJ,GAAJ,CAAQ,QAAR,EAAkB,IAAlB,CAAD,EAA0B,IAAIA,GAAJ,CAAQ,QAAR,EAAkB,IAAlB,CAA1B,EAAmD,IAAIA,GAAJ,CAAQ,QAAR,EAAkB,IAAlB,CAAnD,CADW,EAEX,CAAC,IAAIA,GAAJ,CAAQ,QAAR,EAAkB,IAAlB,CAAD,EAA0B,IAAIA,GAAJ,CAAQ,QAAR,EAAkB,IAAlB,CAA1B,EAAmD,IAAIA,GAAJ,CAAQ,QAAR,EAAkB,IAAlB,CAAnD,CAFW,EAGX,CAAC,IAAIA,GAAJ,CAAQ,QAAR,EAAkB,IAAlB,CAAD,EAA0B,IAAIA,GAAJ,CAAQ,QAAR,EAAkB,IAAlB,CAA1B,EAAmD,IAAIA,GAAJ,CAAQ,QAAR,EAAkB,IAAlB,CAAnD,CAHW,CAAb;;AAMA,SAAS2B,UAAT,CAAoBZ,CAApB,EAAuByB,MAAvB,EAA+B;AAC7B,MAAI+B,UAAU,GAAG,CAAjB;AACA,MAAIC,OAAO,GAAG,CAAd;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,MAAM,GAAI,CAAd;;AACA,OAAIF,OAAO,GAAG,CAAd,EAAiBA,OAAO,GAAG,CAA3B,EAA8BA,OAAO,EAArC,EAAwC;AACtC,QAAIG,UAAU,GAAG,IAAjB;;AACA,SAAKJ,UAAU,GAAG,CAAlB,EAAqBA,UAAU,GAAG,CAAlC,EAAqCA,UAAU,EAA/C,EAAmD;AACjD,UAAIxD,CAAC,CAACV,UAAF,CAAakE,UAAb,EAAyBC,OAAzB,EAAkCb,IAAlC,KAA2C,OAA/C,EAAwD;AACtDgB,QAAAA,UAAU,GAAG,KAAb;AACD;AACF;;AACD,QAAIA,UAAJ,EAAgB;AACd,WAAIF,SAAS,GAAG,CAAhB,EAAmBA,SAAS,GAAG,CAA/B,EAAkCA,SAAS,EAA3C,EAA+C;AAC7C,YAAIG,aAAa,GAAG,IAApB;;AACA,aAAKF,MAAM,GAAE,CAAb,EAAgBA,MAAM,GAAG,CAAzB,EAA4BA,MAAM,EAAlC,EAAsC;AACpC3C,UAAAA,OAAO,CAACC,GAAR,CAAYjB,CAAC,CAACV,UAAF,CAAaqE,MAAb,EAAqBD,SAArB,EAAgCd,IAA5C;;AACA,cAAI5C,CAAC,CAACT,SAAF,CAAYoE,MAAZ,EAAoBD,SAApB,EAA+Bd,IAA/B,KAAwC,OAA5C,EAAqD;AACnDiB,YAAAA,aAAa,GAAG,KAAhB;AACD;AACF;;AACD,YAAIA,aAAJ,EAAmB;AACjB,cAAI7D,CAAC,CAACX,IAAF,CAAOoE,OAAP,EAAgBC,SAAhB,EAA2BjC,MAA3B,KAAsC,QAA1C,EAAoD;AAClDzB,YAAAA,CAAC,CAACX,IAAF,CAAOoE,OAAP,EAAgBC,SAAhB,IAA6B,IAAIzE,GAAJ,CAAQwC,MAAR,EAAgBqC,aAAa,CAAC9D,CAAD,EAAIyD,OAAJ,EAAaC,SAAb,CAA7B,CAA7B;AACD,WAFD,MAEO;AACL1D,YAAAA,CAAC,CAACX,IAAF,CAAOoE,OAAP,EAAgBC,SAAhB,EAA2BhC,KAA3B,GAAmCoC,aAAa,CAAC9D,CAAD,EAAIyD,OAAJ,EAAaC,SAAb,CAAhD;AACD;AACF;AACF;AACF;AACF;AACF;;AAED,SAASI,aAAT,CAAuB9D,CAAvB,EAA0ByD,OAA1B,EAAmCC,SAAnC,EAA8C;AAC5C,MAAIK,EAAE,GAAG,CAAT;;AACA,OAAK,IAAItD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA2B;AACzBsD,IAAAA,EAAE,IAAI/D,CAAC,CAACV,UAAF,CAAamB,CAAb,EAAgBgD,OAAhB,EAAyBO,KAAzB,GAAiChE,CAAC,CAACT,SAAF,CAAYkB,CAAZ,EAAeiD,SAAf,EAA0BM,KAAjE;AACD;;AACD,SAAOD,EAAP;AACD;;AAED,SAASlE,WAAT,CAAqBG,CAArB,EAAwBK,MAAxB,EAAgCI,CAAhC,EAAmCe,CAAnC,EAAsCyC,eAAtC,EAAuD;AACrD,MAAIC,sBAAsB,GAAGD,eAAe,CAACE,KAAhB,CAAsB,GAAtB,CAA7B;AACA,MAAIC,WAAW,GAAGF,sBAAsB,CAAC,CAAD,CAAxC;AACA,MAAIG,WAAW,GAAGH,sBAAsB,CAAC,CAAD,CAAxC;AAEA,MAAKI,YAAY,GAAKjE,MAAM,CAACmB,CAAD,CAAN,CAAUf,CAAV,EAAamC,IAAb,KAAsB,OAAvB,IACAvC,MAAM,CAACmB,CAAD,CAAN,CAAUf,CAAV,EAAaoC,IAAb,KAAsBwB,WAD3C;AAEA,MAAIE,QAAQ,GAAIlE,MAAM,CAACmB,CAAD,CAAN,CAAUf,CAAV,EAAamC,IAAb,KAAsB,OAAtC;AACA,MAAI4B,oBAAoB,GAAGD,QAAQ,IAAIE,aAAa,CAACzE,CAAD,EAAIqE,WAAJ,CAApD;AAEA,SAAQD,WAAW,KAAK,OAAjB,IAA6BE,YAA7B,IAA6CE,oBAApD;AACD;;AAED,SAASC,aAAT,CAAuBzE,CAAvB,EAA0B6C,IAA1B,EAAgC;AAC9B,MAAI6B,KAAK,GAAG,CAAC,OAAD,EAAU,SAAV,EAAqB,MAArB,EAA6B,OAA7B,CAAZ;;AACA,OAAK,IAAIjE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,SAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,UAAGkD,KAAK,CAAClD,CAAD,CAAL,KAAaqB,IAAhB,EAAsB;AACpB,YAAK7C,CAAC,CAACV,UAAF,CAAakC,CAAb,EAAgBf,CAAhB,EAAmBmC,IAAnB,KAA4B,OAA7B,IAED5C,CAAC,CAACT,SAAF,CAAYiC,CAAZ,EAAef,CAAf,EAAkBmC,IAAlB,KAA2B,OAF9B,EAEwC;AACpC,iBAAO,KAAP;AACH;AACF;AACF;AACF;;AACD,SAAO,IAAP;AACD;;AAED,SAASO,gBAAT,GAA4B;AAC1B,MAAIwB,CAAC,GAAGC,OAAO,CAACC,OAAR,CAAgB,iBAAhB,EAAmC,KAAnC,EAA0C,QAA1C,CAAR;;AACA,MAAI3B,MAAM,GAAG,EAAb;AACAyB,EAAAA,CAAC,CAACG,IAAF,GAASzB,OAAT,CAAiB0B,IAAI,IACnB;AACE7B,IAAAA,MAAM,CAAC6B,IAAI,CAACC,OAAL,CAAa,IAAb,EAAmB,EAAnB,EAAuBA,OAAvB,CAA+B,MAA/B,EAAuC,EAAvC,CAAD,CAAN,GAAqDL,CAAC,CAACI,IAAD,CAAtD;AACD,GAHH;AAIA,SAAO7B,MAAP;AACD;;AAGD,eAAed,GAAf","sourcesContent":["import { Client } from 'boardgame.io/react';\nimport { Game } from 'boardgame.io/core';\nimport { AI } from 'boardgame.io/ai';\n\nimport { MatrioBoard } from './components/MatrioBoard'\nimport { DealerService } from './services/DealerService';\nimport { Card } from './shared/Card';\nimport { Dot } from './shared/Dot';\n\n\nconst dealer = new DealerService();\n\nconst Matrio = Game({\n  setup: () => ({\n    dots: dots,\n    leftMatrix: leftMatrix,\n    topMatrix: topMatrix,\n    prodMatrix: Array(9).fill(null),\n    playerCards: playerCards,\n    players: ['south', 'west', 'north', 'east'],\n    canDropCard: canDropCard}),\n  moves: {\n    placeCard(G, ctx, cardname, row, col, matrix) {\n      let playerName = G.players[ctx.currentPlayer];\n      //console.log(playerName + \" places card\");\n      //if (playerName === 'south') {\n        G.playerCards[\"south\"] = G.playerCards[\"south\"].filter((i) => {\n          return i.name !== cardname;\n        });\n        G[matrix][col][row] = name_card[cardname];\n        updateDots(G, playerName);\n      //}\n    }\n  },\n  flow: {\n    movesPerTurn: 1,\n    onTurnEnd: (G, ctx) => {\n      console.log(\"Turn has ended\");\n    },\n    onMove: (G, ctx) => {\n      console.log(\"Move made\");\n    },\n    endGameIf: (G, ctx) => {\n      let done = true;\n      let totals = {\n        \"south\" : 0,\n        \"west\" : 0,\n        \"north\" : 0,\n        \"east\" : 0,\n        \"nobody\" : 0\n      };\n\n      for (let p = 0; p < 4; p++) {\n        if (G.playerCards[G.players[p]].length > 0){\n          done = false;\n        }\n        if (done) {\n          for (let i = 0; i < 3; i++) {\n            for (let j = 0; j < 3; j++) {\n              totals[G.dots[i][j].player] += G.dots[i][j].score;\n            }\n          }\n        } \n      }\n\n      let scoresList = [];\n\n      for (var player in totals) {\n        scoresList.push([player, totals[player]]);\n      }\n\n      scoresList.sort(function(a, b) {\n        return b[1] - a[1];\n      });\n\n      if (IsVictory(scoresList)) {\n        return { winner: scoresList[0][0] };\n      }\n      if (IsDraw(scoresList)) {\n        return { draw: true };\n      }\n    },\n  },\n});\n\nconst App = Client({\n  game: Matrio,\n  board: MatrioBoard,\n  ai: AI({\n    bot: AI.RandomBot,\n    enumerate: (G, ctx) => {\n      let playerName = G.players[ctx.currentPlayer];\n      let cards = G.playerCards[playerName];\n      let moves = [];\n      for (let i = 0; i < cards.length; i++) {\n        let cardname = cards[i].face + \"_\" + cards[i].suit\n        // add leftMatrix moves\n        for (let row = 0; row < 3; row++) {\n          for (let col = 0; col < 4; col++) {\n            // canDropCard(G, matrix, i, j, draggedCardName)\n            if (canDropCard(G, leftMatrix, row, col, cardname)){\n              moves.push({\n                move: 'placeCard', args: [cardname, row, col, 'leftMatrix']\n              })\n            }\n          }\n        }\n        // add topMatrix moves\n        // for (let col = 0; col < 3; col++) {\n        //   for (let row = 0; row < 4; row++) {\n\n        //   }\n        // }\n\n//         if (G.cells[i] === null) {\n//           moves.push({\n//             // placeCard(G, ctx, player, cardname, row, col, matrix)\n//  //           move: 'placeCard', args: [cardname, row, col, matrix]\n//           });\n//         }\n      }\n      //return moves.slice(0,2);\n      return moves;\n    },\n  }),\n  debug: true,\n  numPlayers: 4,\n  images: importCardImages()\n});\n\nfunction IsVictory(scoresList) {\n  return scoresList[0] > scoresList[1];\n}\n\n// Return true if all cells are occupied\nfunction IsDraw(scoresList) {\n  // return cells.filter(c => c === null).length === 0;\n  return scoresList[0] == scoresList[1];\n}\n\nconst leftMatrix = [\n              [new Card('spade', 'blank'), \n              new Card('spade', 'blank'), \n              new Card('spade', 'blank')],\n              [new Card('diamond', 'blank'), \n              new Card('diamond', 'blank'), \n              new Card('diamond', 'blank')],\n              [new Card('club', 'blank'), \n              new Card('club', 'blank'), \n              new Card('club', 'blank')],\n              [new Card('heart', 'blank'), \n              new Card('heart', 'blank'), \n              new Card('heart', 'blank')]]\n\nconst topMatrix = [\n              [new Card('spade', 'blank'), \n              new Card('spade', 'blank'), \n              new Card('spade', 'blank')],\n              [new Card('diamond', 'blank'), \n              new Card('diamond', 'blank'), \n              new Card('diamond', 'blank')],\n              [new Card('club', 'blank'), \n              new Card('club', 'blank'), \n              new Card('club', 'blank')],\n              [new Card('heart', 'blank'), \n              new Card('heart', 'blank'), \n              new Card('heart', 'blank')]]\n\n\nconst name_card = {}\ndealer.deck.forEach(card => {\n  name_card[card.name] = card;\n});\n\nconst playerCards = {\n    \"north\": dealer.deck.slice(0,13), \n    \"south\": dealer.deck.slice(13, 26), \n    \"east\": dealer.deck.slice(26, 39),\n    \"west\": dealer.deck.slice(39, 52)\n  }\n\nconst dots = [\n  [new Dot('nobody', null), new Dot('nobody', null), new Dot('nobody', null)],\n  [new Dot('nobody', null), new Dot('nobody', null), new Dot('nobody', null)],\n  [new Dot('nobody', null), new Dot('nobody', null), new Dot('nobody', null)]\n]\n\nfunction updateDots(G, player) {\n  let leftColumn = 0;\n  let leftRow = 0;\n  let topColumn = 0;\n  let topRow  = 0\n  for(leftRow = 0; leftRow < 3; leftRow++){\n    let filledrows = true;\n    for (leftColumn = 0; leftColumn < 3; leftColumn++) {\n      if (G.leftMatrix[leftColumn][leftRow].face === 'blank') {\n        filledrows = false\n      }\n    }\n    if (filledrows) {\n      for(topColumn = 0; topColumn < 3; topColumn++) {\n        let filledcolumns = true;\n        for (topRow= 0; topRow < 4; topRow++) {\n          console.log(G.leftMatrix[topRow][topColumn].face)\n          if (G.topMatrix[topRow][topColumn].face === 'blank') {\n            filledcolumns = false\n          }\n        }\n        if (filledcolumns) {\n          if (G.dots[leftRow][topColumn].player === 'nobody') {\n            G.dots[leftRow][topColumn] = new Dot(player, getDotProduct(G, leftRow, topColumn));\n          } else {\n            G.dots[leftRow][topColumn].score = getDotProduct(G, leftRow, topColumn);\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction getDotProduct(G, leftRow, topColumn) {\n  let dp = 0;\n  for (let i = 0; i < 4; i++){\n    dp += G.leftMatrix[i][leftRow].value * G.topMatrix[i][topColumn].value;\n  }\n  return dp;\n}\n\nfunction canDropCard(G, matrix, i, j, draggedCardName) {\n  let draggedCardFaceAndSuit = draggedCardName.split('_');\n  let draggedFace = draggedCardFaceAndSuit[0]\n  let draggedSuit = draggedCardFaceAndSuit[1]\n  \n  let  matchesBlank = ((matrix[j][i].face === 'blank') && \n                      (matrix[j][i].suit === draggedSuit));\n  let notBlank = (matrix[j][i].face !== 'blank')\n  let notBlankAndTraysFull = notBlank && suitTraysFull(G, draggedSuit);\n\n  return (draggedFace === 'joker') || matchesBlank || notBlankAndTraysFull;\n}\n\nfunction suitTraysFull(G, suit) {\n  let suits = ['spade', 'diamond', 'club', 'heart'];\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 4; j++) {\n      if(suits[j] === suit) {\n        if ((G.leftMatrix[j][i].face === 'blank') \n        ||\n          (G.topMatrix[j][i].face === 'blank')) {\n            return false;\n        }\n      }\n    }\n  }\n  return true\n}\n\nfunction importCardImages() {\n  let r = require.context('./assets/cards/', false, /\\.png$/)\n  let images = {};\n  r.keys().forEach(item => \n    { \n      images[item.replace('./', '').replace('.png', '')] = r(item)\n    });\n  return images;\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}