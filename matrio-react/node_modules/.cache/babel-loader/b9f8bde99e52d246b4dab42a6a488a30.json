{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('immer'), require('flatted')) : typeof define === 'function' && define.amd ? define(['exports', 'immer', 'flatted'], factory) : (global = global || self, factory(global.Core = {}, global.immer, global.Flatted));\n})(this, function (exports, produce, flatted) {\n  'use strict';\n\n  produce = produce && produce.hasOwnProperty('default') ? produce['default'] : produce;\n\n  function _typeof(obj) {\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function _objectSpread(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n      var ownKeys = Object.keys(source);\n\n      if (typeof Object.getOwnPropertySymbols === 'function') {\n        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n          return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n        }));\n      }\n\n      ownKeys.forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    }\n\n    return target;\n  }\n\n  function _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n\n    for (i = 0; i < sourceKeys.length; i++) {\n      key = sourceKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      target[key] = source[key];\n    }\n\n    return target;\n  }\n\n  function _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n\n    var key, i;\n\n    if (Object.getOwnPropertySymbols) {\n      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n      for (i = 0; i < sourceSymbolKeys.length; i++) {\n        key = sourceSymbolKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n        target[key] = source[key];\n      }\n    }\n\n    return target;\n  }\n\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    }\n  }\n\n  function _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n  }\n  /*\n   * Copyright 2018 The boardgame.io Authors\n   *\n   * Use of this source code is governed by a MIT-style\n   * license that can be found in the LICENSE file or at\n   * https://opensource.org/licenses/MIT.\n   */\n\n  /**\n   * Plugin that allows using Immer to make immutable changes\n   * to G by just mutating it.\n   */\n\n\n  var PluginImmer = {\n    fnWrap: function fnWrap(move) {\n      return produce(move);\n    }\n  };\n  /**\n   * List of plugins that are always added.\n   */\n\n  var DEFAULT_PLUGINS = [PluginImmer];\n  /**\n   * Applies the provided plugins to ctx before processing a move / event.\n   *\n   * @param {object} ctx - The ctx object.\n   * @param {object} game - The game object.\n   */\n\n  var CtxPreMove = function CtxPreMove(ctx, game) {\n    [].concat(DEFAULT_PLUGINS, _toConsumableArray(game.plugins)).filter(function (plugin) {\n      return plugin.ctx !== undefined;\n    }).filter(function (plugin) {\n      return plugin.ctx.preMove !== undefined;\n    }).forEach(function (plugin) {\n      ctx = plugin.ctx.preMove(ctx, game);\n    });\n    return ctx;\n  };\n  /**\n   * Applies the provided plugins to G before processing a move / event.\n   *\n   * @param {object} G - The G object.\n   * @param {object} game - The game object.\n   */\n\n\n  var GPreMove = function GPreMove(G, game) {\n    [].concat(DEFAULT_PLUGINS, _toConsumableArray(game.plugins)).filter(function (plugin) {\n      return plugin.G !== undefined;\n    }).filter(function (plugin) {\n      return plugin.G.preMove !== undefined;\n    }).forEach(function (plugin) {\n      G = plugin.G.preMove(G, game);\n    });\n    return G;\n  };\n  /**\n   * Postprocesses G after a move / event.\n   *\n   * @param {object} G - The G object.\n   * @param {object} game - The game object.\n   */\n\n\n  var GPostMove = function GPostMove(G, game) {\n    [].concat(DEFAULT_PLUGINS, _toConsumableArray(game.plugins)).filter(function (plugin) {\n      return plugin.G !== undefined;\n    }).filter(function (plugin) {\n      return plugin.G.postMove !== undefined;\n    }).forEach(function (plugin) {\n      G = plugin.G.postMove(G, game);\n    });\n    return G;\n  };\n  /**\n   * Applies the provided plugins to the given move / flow function.\n   *\n   * @param {function} fn - The move function or trigger to apply the plugins to.\n   * @param {object} game - The game object.\n   */\n\n\n  var FnWrap = function FnWrap(fn, game) {\n    var reducer = function reducer(acc, _ref) {\n      var fnWrap = _ref.fnWrap;\n      return fnWrap(acc, game);\n    };\n\n    var g = [].concat(DEFAULT_PLUGINS, _toConsumableArray(game.plugins)).filter(function (plugin) {\n      return plugin.fnWrap !== undefined;\n    }).reduce(reducer, fn);\n    return function (G, ctx) {\n      G = GPreMove(G, game);\n      ctx = CtxPreMove(ctx, game);\n\n      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        args[_key - 2] = arguments[_key];\n      }\n\n      G = g.apply(void 0, [G, ctx].concat(args));\n      G = GPostMove(G, game);\n      return G;\n    };\n  };\n\n  var G = {\n    /**\n     * Applies the provided plugins to G during game setup.\n     *\n     * @param {object} G - The G object.\n     * @param {object} ctx - The ctx object.\n     * @param {object} game - The game object.\n     */\n    setup: function setup(G, ctx, game) {\n      [].concat(DEFAULT_PLUGINS, _toConsumableArray(game.plugins)).filter(function (plugin) {\n        return plugin.G !== undefined;\n      }).filter(function (plugin) {\n        return plugin.G.setup !== undefined;\n      }).forEach(function (plugin) {\n        G = plugin.G.setup(G, ctx, game);\n      });\n      return G;\n    },\n\n    /**\n     * Applies the provided plugins to G during the beginning of the phase.\n     *\n     * @param {object} G - The G object.\n     * @param {object} ctx - The ctx object.\n     * @param {object} game - The game object.\n     */\n    onPhaseBegin: function onPhaseBegin(G, ctx, game) {\n      [].concat(DEFAULT_PLUGINS, _toConsumableArray(game.plugins)).filter(function (plugin) {\n        return plugin.G !== undefined;\n      }).filter(function (plugin) {\n        return plugin.G.onPhaseBegin !== undefined;\n      }).forEach(function (plugin) {\n        G = plugin.G.onPhaseBegin(G, ctx, game);\n      });\n      return G;\n    }\n  };\n  var ctx = {\n    /**\n     * Applies the provided plugins to ctx during game setup.\n     *\n     * @param {object} ctx - The ctx object.\n     * @param {object} game - The game object.\n     */\n    setup: function setup(ctx, game) {\n      [].concat(DEFAULT_PLUGINS, _toConsumableArray(game.plugins)).filter(function (plugin) {\n        return plugin.ctx !== undefined;\n      }).filter(function (plugin) {\n        return plugin.ctx.setup !== undefined;\n      }).forEach(function (plugin) {\n        ctx = plugin.ctx.setup(ctx, game);\n      });\n      return ctx;\n    },\n\n    /**\n     * Applies the provided plugins to ctx during the beginning of the phase.\n     *\n     * @param {object} ctx - The ctx object.\n     * @param {object} game - The game object.\n     */\n    onPhaseBegin: function onPhaseBegin(ctx, game) {\n      [].concat(DEFAULT_PLUGINS, _toConsumableArray(game.plugins)).filter(function (plugin) {\n        return plugin.ctx !== undefined;\n      }).filter(function (plugin) {\n        return plugin.ctx.onPhaseBegin !== undefined;\n      }).forEach(function (plugin) {\n        ctx = plugin.ctx.onPhaseBegin(ctx, game);\n      });\n      return ctx;\n    }\n  };\n  /*\n   * Copyright 2018 The boardgame.io Authors\n   *\n   * Use of this source code is governed by a MIT-style\n   * license that can be found in the LICENSE file or at\n   * https://opensource.org/licenses/MIT.\n   */\n\n  var DEV = process.env.NODE_ENV === 'development' || process.env.NODE_ENV == 'test';\n  var logfn = DEV ? console.log : function () {};\n  var errorfn = DEV ? console.error : function () {};\n\n  function error(error) {\n    errorfn('ERROR:', error);\n  }\n  /**\n   * Standard move that simulates passing.\n   *\n   * Creates two objects in G:\n   * passOrder - An array of playerIDs capturing passes in the pass order.\n   * allPassed - Set to true when all players have passed.\n   */\n\n\n  var Pass = function Pass(G, ctx) {\n    var passOrder = [];\n\n    if (G.passOrder !== undefined) {\n      passOrder = G.passOrder;\n    }\n\n    var playerID = ctx.playerID;\n    passOrder = [].concat(_toConsumableArray(passOrder), [playerID]);\n    G = _objectSpread({}, G, {\n      passOrder: passOrder\n    });\n\n    if (passOrder.length >= ctx.numPlayers) {\n      G = _objectSpread({}, G, {\n        allPassed: true\n      });\n    }\n\n    return G;\n  };\n  /**\n   * Event to change the actionPlayers array.\n   * @param {object} state - The game state.\n   * @param {object} arg - An array of playerID's or <object> of:\n   *   {\n   *     value: (G, ctx) => [],        // function that returns an array of playerID's (optional if all is set)\n   *\n   *     all: true,        // set value to all playerID's\n   *\n   *     others: true,     // set value to all except currentPlayer.\n   *\n   *     once: true,       // players have one move\n   *                       // (after which they're pruned from actionPlayers).\n   *                       // The phase ends once actionPlayers becomes empty.\n   *   }\n   */\n\n\n  function SetActionPlayersEvent(state, arg) {\n    return _objectSpread({}, state, {\n      ctx: setActionPlayers(state.G, state.ctx, arg)\n    });\n  }\n\n  function setActionPlayers(G, ctx, arg) {\n    var actionPlayers = [];\n\n    if (arg.value) {\n      actionPlayers = arg.value(G, ctx);\n    }\n\n    if (arg.all) {\n      actionPlayers = _toConsumableArray(ctx.playOrder);\n    }\n\n    if (arg.others) {\n      actionPlayers = _toConsumableArray(ctx.playOrder).filter(function (nr) {\n        return nr !== ctx.currentPlayer;\n      });\n    }\n\n    if (Array.isArray(arg)) {\n      actionPlayers = arg;\n    }\n\n    return _objectSpread({}, ctx, {\n      actionPlayers: actionPlayers,\n      _actionPlayersOnce: arg.once || false\n    });\n  }\n  /**\n   * Converts a playOrderPos index into its value in playOrder.\n   * @param {Array} playOrder - An array of player ID's.\n   * @param {number} playOrderPos - An index into the above.\n   */\n\n\n  function getCurrentPlayer(playOrder, playOrderPos) {\n    return playOrder[playOrderPos] + '';\n  }\n  /**\n   * Called at the start of a phase to initialize turn order state.\n   * @param {object} G - The game object G.\n   * @param {object} ctx - The game object ctx.\n   * @param {object} turnOrder - A turn order object for this phase.\n   */\n\n\n  function InitTurnOrderState(G, ctx, turnOrder) {\n    var playOrder = _toConsumableArray(new Array(ctx.numPlayers)).map(function (d, i) {\n      return i + '';\n    });\n\n    if (turnOrder.playOrder !== undefined) {\n      playOrder = turnOrder.playOrder(G, ctx);\n    }\n\n    var playOrderPos = turnOrder.first(G, ctx);\n    var currentPlayer = getCurrentPlayer(playOrder, playOrderPos);\n\n    if (turnOrder.actionPlayers !== undefined) {\n      ctx = setActionPlayers(G, ctx, turnOrder.actionPlayers);\n    } else {\n      ctx = _objectSpread({}, ctx, {\n        actionPlayers: [currentPlayer]\n      });\n    }\n\n    return _objectSpread({}, ctx, {\n      currentPlayer: currentPlayer,\n      playOrderPos: playOrderPos,\n      playOrder: playOrder\n    });\n  }\n  /**\n   * Called at the end of each turn to update the turn order state.\n   * @param {object} G - The game object G.\n   * @param {object} ctx - The game object ctx.\n   * @param {object} turnOrder - A turn order object for this phase.\n   * @param {string} endTurnArg - An optional argument to endTurn that\n                                  may specify the next player.\n   */\n\n\n  function UpdateTurnOrderState(G, ctx, turnOrder, endTurnArg) {\n    var playOrderPos = ctx.playOrderPos;\n    var currentPlayer = ctx.currentPlayer;\n    var actionPlayers = ctx.actionPlayers;\n    var endPhase = false;\n\n    if (endTurnArg && endTurnArg !== true) {\n      if (ctx.playOrder.includes(endTurnArg.next)) {\n        playOrderPos = ctx.playOrder.indexOf(endTurnArg.next);\n        currentPlayer = endTurnArg.next;\n        actionPlayers = [currentPlayer];\n      } else {\n        error(\"invalid argument to endTurn: \".concat(endTurnArg));\n      }\n    } else {\n      var t = turnOrder.next(G, ctx);\n\n      if (t === undefined) {\n        endPhase = true;\n      } else {\n        playOrderPos = t;\n        currentPlayer = getCurrentPlayer(ctx.playOrder, playOrderPos);\n\n        if (turnOrder.actionPlayers === undefined) {\n          actionPlayers = [currentPlayer];\n        }\n      }\n    }\n\n    ctx = _objectSpread({}, ctx, {\n      playOrderPos: playOrderPos,\n      currentPlayer: currentPlayer,\n      actionPlayers: actionPlayers\n    });\n    return {\n      endPhase: endPhase,\n      ctx: ctx\n    };\n  }\n  /**\n   * Set of different turn orders possible in a phase.\n   * These are meant to be passed to the `turnOrder` setting\n   * in the flow objects.\n   *\n   * Each object defines the first player when the phase / game\n   * begins, and also a function `next` to determine who the\n   * next player is when the turn ends.\n   *\n   * Objects can also contain an actionPlayers section which\n   * is passed to SetActionPlayers above at the beginning of\n   * the phase.\n   *\n   * The phase ends if next() returns undefined.\n   */\n\n\n  var TurnOrder = {\n    /**\n     * DEFAULT\n     *\n     * The default round-robin turn order.\n     */\n    DEFAULT: {\n      first: function first(G, ctx) {\n        return ctx.playOrderPos;\n      },\n      next: function next(G, ctx) {\n        return (ctx.playOrderPos + 1) % ctx.playOrder.length;\n      }\n    },\n\n    /**\n     * ONCE\n     *\n     * Another round-robin turn order, but goes around just once.\n     * The phase ends after all players have played.\n     */\n    ONCE: {\n      first: function first() {\n        return 0;\n      },\n      next: function next(G, ctx) {\n        if (ctx.playOrderPos < ctx.playOrder.length - 1) {\n          return ctx.playOrderPos + 1;\n        }\n      }\n    },\n\n    /**\n     * ANY\n     *\n     * The turn stays with one player, but any player can play (in any order)\n     * until the phase ends.\n     */\n    ANY: {\n      first: function first(G, ctx) {\n        return ctx.playOrderPos;\n      },\n      next: function next(G, ctx) {\n        return ctx.playOrderPos;\n      },\n      actionPlayers: {\n        all: true\n      }\n    },\n\n    /**\n     * ANY_ONCE\n     *\n     * The turn stays with one player, but any player can play (once, and in any order).\n     * This is typically used in a phase where you want to elicit a response\n     * from every player in the game.\n     */\n    ANY_ONCE: {\n      first: function first(G, ctx) {\n        return ctx.playOrderPos;\n      },\n      next: function next(G, ctx) {\n        return ctx.playOrderPos;\n      },\n      actionPlayers: {\n        all: true,\n        once: true\n      },\n      endPhaseOnceDone: true\n    },\n\n    /**\n     * OTHERS\n     *\n     * The turn stays with one player, and every *other* player can play (in any order)\n     * until the phase ends.\n     */\n    OTHERS: {\n      first: function first(G, ctx) {\n        return ctx.playOrderPos;\n      },\n      next: function next(G, ctx) {\n        return ctx.playOrderPos;\n      },\n      actionPlayers: {\n        others: true\n      }\n    },\n\n    /**\n     * OTHERS_ONCE\n     *\n     * The turn stays with one player, and every *other* player can play (once, and in any order).\n     * This is typically used in a phase where you want to elicit a response\n     * from every *other* player in the game.\n     */\n    OTHERS_ONCE: {\n      first: function first(G, ctx) {\n        return ctx.playOrderPos;\n      },\n      next: function next(G, ctx) {\n        return ctx.playOrderPos;\n      },\n      actionPlayers: {\n        others: true,\n        once: true\n      },\n      endPhaseOnceDone: true\n    },\n\n    /**\n     * CUSTOM\n     *\n     * Identical to DEFAULT, but also sets playOrder at the\n     * beginning of the phase.\n     *\n     * @param {Array} playOrder - The play order.\n     */\n    CUSTOM: function CUSTOM(_playOrder) {\n      return {\n        playOrder: function playOrder() {\n          return _playOrder;\n        },\n        first: function first() {\n          return 0;\n        },\n        next: function next(G, ctx) {\n          return (ctx.playOrderPos + 1) % ctx.playOrder.length;\n        }\n      };\n    },\n\n    /**\n     * CUSTOM_FROM\n     *\n     * Identical to DEFAULT, but also sets playOrder at the\n     * beginning of the phase to a value specified by a field\n     * in G.\n     *\n     * @param {string} playOrderField - Field in G.\n     */\n    CUSTOM_FROM: function CUSTOM_FROM(playOrderField) {\n      return {\n        playOrder: function playOrder(G) {\n          return G[playOrderField];\n        },\n        first: function first() {\n          return 0;\n        },\n        next: function next(G, ctx) {\n          return (ctx.playOrderPos + 1) % ctx.playOrder.length;\n        }\n      };\n    },\n\n    /**\n     * SKIP\n     *\n     * Round-robin, but skips over any players that have passed.\n     * Meant to be used with Pass above.\n     */\n    SKIP: {\n      first: function first(G, ctx) {\n        return ctx.playOrderPos;\n      },\n      next: function next(G, ctx) {\n        if (G.allPassed) return;\n        var playOrderPos = ctx.playOrderPos;\n\n        for (var i = 0; i < ctx.playOrder.length; i++) {\n          playOrderPos = (playOrderPos + 1) % ctx.playOrder.length;\n\n          if (!G.passOrder.includes(ctx.playOrder[playOrderPos] + '')) {\n            return playOrderPos;\n          }\n        }\n      }\n    }\n  };\n  /*\n   * Copyright 2017 The boardgame.io Authors\n   *\n   * Use of this source code is governed by a MIT-style\n   * license that can be found in the LICENSE file or at\n   * https://opensource.org/licenses/MIT.\n   */\n\n  var MAKE_MOVE = 'MAKE_MOVE';\n  var GAME_EVENT = 'GAME_EVENT';\n  var REDO = 'REDO';\n  var RESET = 'RESET';\n  var SYNC = 'SYNC';\n  var UNDO = 'UNDO';\n  var UPDATE = 'UPDATE';\n  /*\n   * Copyright 2017 The boardgame.io Authors\n   *\n   * Use of this source code is governed by a MIT-style\n   * license that can be found in the LICENSE file or at\n   * https://opensource.org/licenses/MIT.\n   */\n\n  /**\n   * Generate an automatic game event that is a side-effect of a move.\n   * @param {string} type - The event type.\n   * @param {Array}  args - Additional arguments.\n   * @param {string}  playerID - The ID of the player making this action.\n   * @param {string}  credentials - (optional) The credentials for the player making this action.\n   */\n\n  var automaticGameEvent = function automaticGameEvent(type, args, playerID, credentials) {\n    return {\n      type: GAME_EVENT,\n      payload: {\n        type: type,\n        args: args,\n        playerID: playerID,\n        credentials: credentials\n      },\n      automatic: true\n    };\n  }; // Inlined version of Alea from https://github.com/davidbau/seedrandom.\n\n  /*\n   * Copyright 2015 David Bau.\n   *\n   * Permission is hereby granted, free of charge,\n   * to any person obtaining a copy of this software\n   * and associated documentation files (the \"Software\"),\n   * to deal in the Software without restriction, including\n   * without limitation the rights to use, copy, modify, merge,\n   * publish, distribute, sublicense, and/or sell copies of the\n   * Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall\n   * be included in all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n   * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n   * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n   * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n   * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n   * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n   * DEALINGS IN THE SOFTWARE.\n   */\n\n\n  function Alea(seed) {\n    var me = this,\n        mash = Mash();\n\n    me.next = function () {\n      var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n\n      me.s0 = me.s1;\n      me.s1 = me.s2;\n      return me.s2 = t - (me.c = t | 0);\n    }; // Apply the seeding algorithm from Baagoe.\n\n\n    me.c = 1;\n    me.s0 = mash(' ');\n    me.s1 = mash(' ');\n    me.s2 = mash(' ');\n    me.s0 -= mash(seed);\n\n    if (me.s0 < 0) {\n      me.s0 += 1;\n    }\n\n    me.s1 -= mash(seed);\n\n    if (me.s1 < 0) {\n      me.s1 += 1;\n    }\n\n    me.s2 -= mash(seed);\n\n    if (me.s2 < 0) {\n      me.s2 += 1;\n    }\n\n    mash = null;\n  }\n\n  function copy(f, t) {\n    t.c = f.c;\n    t.s0 = f.s0;\n    t.s1 = f.s1;\n    t.s2 = f.s2;\n    return t;\n  }\n\n  function Mash() {\n    var n = 0xefc8249d;\n\n    var mash = function mash(data) {\n      data = data.toString();\n\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n\n    return mash;\n  }\n\n  function alea(seed, opts) {\n    var xg = new Alea(seed),\n        state = opts && opts.state,\n        prng = xg.next;\n    prng.quick = prng;\n\n    if (state) {\n      if (_typeof(state) == 'object') copy(state, xg);\n\n      prng.state = function () {\n        return copy(xg, {});\n      };\n    }\n\n    return prng;\n  }\n  /**\n   * Random\n   *\n   * Calls that require a pseudorandom number generator.\n   * Uses a seed from ctx, and also persists the PRNG\n   * state in ctx so that moves can stay pure.\n   */\n\n\n  var Random =\n  /*#__PURE__*/\n  function () {\n    /**\n     * constructor\n     * @param {object} ctx - The ctx object to initialize from.\n     */\n    function Random(ctx) {\n      _classCallCheck(this, Random); // If we are on the client, the seed is not present.\n      // Just use a temporary seed to execute the move without\n      // crashing it. The move state itself is discarded,\n      // so the actual value doesn't matter.\n\n\n      this.state = ctx._random || {\n        seed: '0'\n      };\n    }\n    /**\n     * Updates ctx with the PRNG state.\n     * @param {object} ctx - The ctx object to update.\n     */\n\n\n    _createClass(Random, [{\n      key: \"update\",\n      value: function update(state) {\n        var ctx = _objectSpread({}, state.ctx, {\n          _random: this.state\n        });\n\n        return _objectSpread({}, state, {\n          ctx: ctx\n        });\n      }\n      /**\n       * Attaches the Random API to ctx.\n       * @param {object} ctx - The ctx object to attach to.\n       */\n\n    }, {\n      key: \"attach\",\n      value: function attach(ctx) {\n        return _objectSpread({}, ctx, {\n          random: this._api()\n        });\n      }\n      /**\n       * Generate a random number.\n       */\n\n    }, {\n      key: \"_random\",\n      value: function _random() {\n        var R = this.state;\n        var fn;\n\n        if (R.prngstate === undefined) {\n          // No call to a random function has been made.\n          fn = new alea(R.seed, {\n            state: true\n          });\n        } else {\n          fn = new alea('', {\n            state: R.prngstate\n          });\n        }\n\n        var number = fn();\n        this.state = _objectSpread({}, R, {\n          prngstate: fn.state()\n        });\n        return number;\n      }\n    }, {\n      key: \"_api\",\n      value: function _api() {\n        var random = this._random.bind(this);\n\n        var SpotValue = {\n          D4: 4,\n          D6: 6,\n          D8: 8,\n          D10: 10,\n          D12: 12,\n          D20: 20\n        }; // Generate functions for predefined dice values D4 - D20.\n\n        var predefined = {};\n\n        var _loop = function _loop(key) {\n          var spotvalue = SpotValue[key];\n\n          predefined[key] = function (diceCount) {\n            if (diceCount === undefined) {\n              return Math.floor(random() * spotvalue) + 1;\n            } else {\n              return _toConsumableArray(new Array(diceCount).keys()).map(function () {\n                return Math.floor(random() * spotvalue) + 1;\n              });\n            }\n          };\n        };\n\n        for (var key in SpotValue) {\n          _loop(key);\n        }\n\n        return _objectSpread({}, predefined, {\n          /**\n           * Roll a die of specified spot value.\n           *\n           * @param {number} spotvalue - The die dimension (default: 6).\n           * @param {number} diceCount - number of dice to throw.\n           *                             if not defined, defaults to 1 and returns the value directly.\n           *                             if defined, returns an array containing the random dice values.\n           */\n          Die: function Die(spotvalue, diceCount) {\n            if (spotvalue === undefined) {\n              spotvalue = 6;\n            }\n\n            if (diceCount === undefined) {\n              return Math.floor(random() * spotvalue) + 1;\n            } else {\n              return _toConsumableArray(new Array(diceCount).keys()).map(function () {\n                return Math.floor(random() * spotvalue) + 1;\n              });\n            }\n          },\n\n          /**\n           * Generate a random number between 0 and 1.\n           */\n          Number: function Number() {\n            return random();\n          },\n\n          /**\n           * Shuffle an array.\n           *\n           * @param {Array} deck - The array to shuffle. Does not mutate\n           *                       the input, but returns the shuffled array.\n           */\n          Shuffle: function Shuffle(deck) {\n            var clone = deck.slice(0);\n            var srcIndex = deck.length;\n            var dstIndex = 0;\n            var shuffled = new Array(srcIndex);\n\n            while (srcIndex) {\n              var randIndex = srcIndex * random() | 0;\n              shuffled[dstIndex++] = clone[randIndex];\n              clone[randIndex] = clone[--srcIndex];\n            }\n\n            return shuffled;\n          }\n        });\n      }\n    }]);\n\n    return Random;\n  }();\n  /**\n   * Removes the attached Random api from ctx.\n   *\n   * @param {object} ctx - The ctx object with the Random API attached.\n   * @returns {object} A plain ctx object without the Random API.\n   */\n\n\n  Random.detach = function (ctx) {\n    var random = ctx.random,\n        rest = _objectWithoutProperties(ctx, [\"random\"]); // eslint-disable-line no-unused-vars\n\n\n    return rest;\n  };\n  /**\n   * Generates a new seed from the current date / time.\n   */\n\n\n  Random.seed = function () {\n    return (+new Date()).toString(36).slice(-10);\n  };\n  /**\n   * Events\n   */\n\n\n  var Events =\n  /*#__PURE__*/\n  function () {\n    function Events(flow, playerID) {\n      _classCallCheck(this, Events);\n\n      this.flow = flow;\n      this.playerID = playerID;\n      this.dispatch = [];\n    }\n    /**\n     * Attaches the Events API to ctx.\n     * @param {object} ctx - The ctx object to attach to.\n     */\n\n\n    _createClass(Events, [{\n      key: \"attach\",\n      value: function attach(ctx) {\n        var _this = this;\n\n        var events = {};\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          var _loop = function _loop() {\n            var key = _step.value;\n\n            events[key] = function () {\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n\n              _this.dispatch.push({\n                key: key,\n                args: args\n              });\n            };\n          };\n\n          for (var _iterator = this.flow.eventNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            _loop();\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return _objectSpread({}, ctx, {\n          events: events\n        });\n      }\n      /**\n       * Updates ctx with the triggered events.\n       * @param {object} state - The state object { G, ctx }.\n       */\n\n    }, {\n      key: \"update\",\n      value: function update$$1(state) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = this.dispatch[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var item = _step2.value;\n            var action = automaticGameEvent(item.key, item.args, this.playerID);\n            state = _objectSpread({}, state, this.flow.processGameEvent(state, action));\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        return state;\n      }\n    }]);\n\n    return Events;\n  }();\n  /**\n   * Detaches the Events API from ctx.\n   * @param {object} ctx - The ctx object to strip.\n   */\n\n\n  Events.detach = function (ctx) {\n    var events = ctx.events,\n        rest = _objectWithoutProperties(ctx, [\"events\"]); // eslint-disable-line no-unused-vars\n\n\n    return rest;\n  };\n  /**\n   * Moves can return this when they want to indicate\n   * that the combination of arguments is illegal and\n   * the move ought to be discarded.\n   */\n\n\n  var INVALID_MOVE = 'INVALID_MOVE';\n  /**\n   * Context API to allow writing custom logs in games.\n   */\n\n  var GameLoggerCtxAPI =\n  /*#__PURE__*/\n  function () {\n    function GameLoggerCtxAPI() {\n      _classCallCheck(this, GameLoggerCtxAPI);\n\n      this._payload = undefined;\n    }\n\n    _createClass(GameLoggerCtxAPI, [{\n      key: \"_api\",\n      value: function _api() {\n        var _this = this;\n\n        return {\n          setPayload: function setPayload(payload) {\n            _this._payload = payload;\n          }\n        };\n      }\n    }, {\n      key: \"attach\",\n      value: function attach(ctx$$1) {\n        return _objectSpread({}, ctx$$1, {\n          log: this._api()\n        });\n      }\n    }, {\n      key: \"update\",\n      value: function update(state) {\n        if (this._payload === undefined) {\n          return state;\n        } // attach the payload to the last log event\n\n\n        var deltalog = state.deltalog;\n        deltalog[deltalog.length - 1] = _objectSpread({}, deltalog[deltalog.length - 1], {\n          payload: this._payload\n        });\n        this._payload = undefined;\n        return _objectSpread({}, state, {\n          deltalog: deltalog\n        });\n      }\n    }], [{\n      key: \"detach\",\n      value: function detach(ctx$$1) {\n        var log = ctx$$1.log,\n            ctxWithoutLog = _objectWithoutProperties(ctx$$1, [\"log\"]); // eslint-disable-line no-unused-vars\n\n\n        return ctxWithoutLog;\n      }\n    }]);\n\n    return GameLoggerCtxAPI;\n  }();\n  /**\n   * This class is used to attach/detach various utility objects\n   * onto a ctx, without having to manually attach/detach them\n   * all separately.\n   */\n\n\n  var ContextEnhancer =\n  /*#__PURE__*/\n  function () {\n    function ContextEnhancer(ctx$$1, game, player) {\n      _classCallCheck(this, ContextEnhancer);\n\n      this.random = new Random(ctx$$1);\n      this.events = new Events(game.flow, player);\n      this.log = new GameLoggerCtxAPI();\n    }\n\n    _createClass(ContextEnhancer, [{\n      key: \"attachToContext\",\n      value: function attachToContext(ctx$$1) {\n        var ctxWithAPI = this.random.attach(ctx$$1);\n        ctxWithAPI = this.events.attach(ctxWithAPI);\n        ctxWithAPI = this.log.attach(ctxWithAPI);\n        return ctxWithAPI;\n      }\n    }, {\n      key: \"_update\",\n      value: function _update(state, updateEvents) {\n        var newState = updateEvents ? this.events.update(state) : state;\n        newState = this.random.update(newState);\n        newState = this.log.update(newState);\n        return newState;\n      }\n    }, {\n      key: \"updateAndDetach\",\n      value: function updateAndDetach(state, updateEvents) {\n        var newState = this._update(state, updateEvents);\n\n        newState.ctx = ContextEnhancer.detachAllFromContext(newState.ctx);\n        return newState;\n      }\n    }], [{\n      key: \"detachAllFromContext\",\n      value: function detachAllFromContext(ctx$$1) {\n        var ctxWithoutAPI = Random.detach(ctx$$1);\n        ctxWithoutAPI = Events.detach(ctxWithoutAPI);\n        ctxWithoutAPI = GameLoggerCtxAPI.detach(ctxWithoutAPI);\n        return ctxWithoutAPI;\n      }\n    }]);\n\n    return ContextEnhancer;\n  }();\n  /**\n   * InitializeGame\n   *\n   * Creates the initial game state.\n   *\n   * @param {...object} game - Return value of Game().\n   * @param {...object} numPlayers - The number of players.\n   * @param {...object} multiplayer - Set to true if we are in a multiplayer client.\n   */\n\n\n  function InitializeGame(_ref) {\n    var game = _ref.game,\n        numPlayers = _ref.numPlayers,\n        setupData = _ref.setupData;\n\n    if (!numPlayers) {\n      numPlayers = 2;\n    }\n\n    var ctx$$1 = game.flow.ctx(numPlayers);\n    var seed = game.seed;\n\n    if (seed === undefined) {\n      seed = Random.seed();\n    }\n\n    ctx$$1._random = {\n      seed: seed\n    }; // Pass ctx through all the plugins that want to modify it.\n\n    ctx$$1 = ctx.setup(ctx$$1, game); // Augment ctx with the enhancers (TODO: move these into plugins).\n\n    var apiCtx = new ContextEnhancer(ctx$$1, game, ctx$$1.currentPlayer);\n    var ctxWithAPI = apiCtx.attachToContext(ctx$$1);\n    var initialG = game.setup(ctxWithAPI, setupData); // Pass G through all the plugins that want to modify it.\n\n    initialG = G.setup(initialG, ctxWithAPI, game);\n    var initial = {\n      // User managed state.\n      G: initialG,\n      // Framework managed state.\n      ctx: ctx$$1,\n      // List of {G, ctx} pairs that can be undone.\n      _undo: [],\n      // List of {G, ctx} pairs that can be redone.\n      _redo: [],\n      // A monotonically non-decreasing ID to ensure that\n      // state updates are only allowed from clients that\n      // are at the same version that the server.\n      _stateID: 0,\n      // A snapshot of this object so that actions can be\n      // replayed over it to view old snapshots.\n      // TODO: This will no longer be necessary once the\n      // log stops replaying actions (but reads the actual\n      // game states instead).\n      _initial: {}\n    };\n    var state = game.flow.init({\n      G: initial.G,\n      ctx: ctxWithAPI\n    });\n    initial.G = state.G;\n    initial._undo = state._undo;\n    state = apiCtx.updateAndDetach(state, true);\n    initial.ctx = state.ctx;\n\n    var deepCopy = function deepCopy(obj) {\n      return flatted.parse(flatted.stringify(obj));\n    };\n\n    initial._initial = deepCopy(initial);\n    return initial;\n  }\n  /**\n   * CreateGameReducer\n   *\n   * Creates the main game state reducer.\n   * @param {...object} game - Return value of Game().\n   * @param {...object} numPlayers - The number of players.\n   * @param {...object} multiplayer - Set to true if we are in a multiplayer client.\n   */\n\n\n  function CreateGameReducer(_ref2) {\n    var game = _ref2.game,\n        multiplayer = _ref2.multiplayer;\n    /**\n     * GameReducer\n     *\n     * Redux reducer that maintains the overall game state.\n     * @param {object} state - The state before the action.\n     * @param {object} action - A Redux action.\n     */\n\n    return function () {\n      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var action = arguments.length > 1 ? arguments[1] : undefined;\n\n      switch (action.type) {\n        case GAME_EVENT:\n          {\n            state = _objectSpread({}, state, {\n              deltalog: []\n            }); // Process game events only on the server.\n            // These events like `endTurn` typically\n            // contain code that may rely on secret state\n            // and cannot be computed on the client.\n\n            if (multiplayer) {\n              return state;\n            } // Ignore the event if the player isn't allowed to make it.\n\n\n            if (action.payload.playerID !== null && action.payload.playerID !== undefined && !game.flow.canPlayerCallEvent(state.G, state.ctx, action.payload.playerID)) {\n              return state;\n            }\n\n            var apiCtx = new ContextEnhancer(state.ctx, game, action.payload.playerID);\n            state.ctx = apiCtx.attachToContext(state.ctx);\n            var newState = game.flow.processGameEvent(state, action);\n            newState = apiCtx.updateAndDetach(newState, true);\n            return _objectSpread({}, newState, {\n              _stateID: state._stateID + 1\n            });\n          }\n\n        case MAKE_MOVE:\n          {\n            state = _objectSpread({}, state, {\n              deltalog: []\n            }); // Check whether the game knows the move at all.\n\n            if (!game.moveNames.includes(action.payload.type)) {\n              return state;\n            } // Ignore the move if it isn't allowed at this point.\n\n\n            if (!game.flow.canMakeMove(state.G, state.ctx, action.payload.type)) {\n              return state;\n            } // Ignore the move if the player isn't allowed to make it.\n\n\n            if (action.payload.playerID !== null && action.payload.playerID !== undefined && !game.flow.canPlayerMakeMove(state.G, state.ctx, action.payload.playerID)) {\n              return state;\n            }\n\n            var _apiCtx = new ContextEnhancer(state.ctx, game, action.payload.playerID);\n\n            var ctxWithAPI = _apiCtx.attachToContext(state.ctx); // Process the move.\n\n\n            var G$$1 = game.processMove(state.G, action.payload, ctxWithAPI);\n\n            if (G$$1 === INVALID_MOVE) {\n              // the game declared the move as invalid.\n              return state;\n            } // Create a log entry for this move.\n\n\n            var logEntry = {\n              action: action,\n              _stateID: state._stateID,\n              turn: state.ctx.turn,\n              phase: state.ctx.phase\n            }; // don't call into events here\n\n            var _newState = _apiCtx.updateAndDetach(_objectSpread({}, state, {\n              deltalog: [logEntry]\n            }), false);\n\n            var ctx$$1 = _newState.ctx; // Undo changes to G if the move should not run on the client.\n\n            if (multiplayer && !game.flow.optimisticUpdate(G$$1, ctx$$1, action.payload)) {\n              G$$1 = state.G;\n            }\n\n            state = _objectSpread({}, _newState, {\n              G: G$$1,\n              ctx: ctx$$1,\n              _stateID: state._stateID + 1\n            }); // If we're on the client, just process the move\n            // and no triggers in multiplayer mode.\n            // These will be processed on the server, which\n            // will send back a state update.\n\n            if (multiplayer) {\n              return state;\n            } // Allow the flow reducer to process any triggers that happen after moves.\n\n\n            ctxWithAPI = _apiCtx.attachToContext(state.ctx);\n            state = game.flow.processMove(_objectSpread({}, state, {\n              ctx: ctxWithAPI\n            }), action.payload);\n            state = _apiCtx.updateAndDetach(state, true);\n            state._undo[state._undo.length - 1].ctx = state.ctx;\n            return state;\n          }\n\n        case RESET:\n        case UPDATE:\n        case SYNC:\n          {\n            return action.state;\n          }\n\n        case UNDO:\n          {\n            var _state = state,\n                _undo = _state._undo,\n                _redo = _state._redo;\n\n            if (_undo.length < 2) {\n              return state;\n            }\n\n            var last = _undo[_undo.length - 1];\n            var restore = _undo[_undo.length - 2]; // Only allow undoable moves to be undone.\n\n            if (!game.flow.canUndoMove(state.G, state.ctx, last.moveType)) {\n              return state;\n            }\n\n            return _objectSpread({}, state, {\n              G: restore.G,\n              ctx: restore.ctx,\n              _undo: _undo.slice(0, _undo.length - 1),\n              _redo: [last].concat(_toConsumableArray(_redo))\n            });\n          }\n\n        case REDO:\n          {\n            var _state2 = state,\n                _undo2 = _state2._undo,\n                _redo2 = _state2._redo;\n\n            if (_redo2.length == 0) {\n              return state;\n            }\n\n            var first = _redo2[0];\n            return _objectSpread({}, state, {\n              G: first.G,\n              ctx: first.ctx,\n              _undo: [].concat(_toConsumableArray(_undo2), [first]),\n              _redo: _redo2.slice(1)\n            });\n          }\n\n        default:\n          {\n            return state;\n          }\n      }\n    };\n  }\n  /**\n   * Helper to create a reducer that manages ctx (with the\n   * ability to also update G).\n   *\n   * You probably want to use FlowWithPhases below, but you might\n   * need to use this directly if you are creating a very customized\n   * game flow that it cannot handle.\n   *\n   * @param {...object} ctx - Function with the signature\n   *                          numPlayers => ctx\n   *                          that determines the initial value of ctx.\n   * @param {...object} events - Object containing functions\n   *                             named after events that this\n   *                             reducer will handle. Each function\n   *                             has the following signature:\n   *                             ({G, ctx}) => {G, ctx}\n   * @param {...object} enabledEvents - Map of eventName -> bool indicating\n   *                                    which events are callable from the client\n   *                                    or from within moves.\n   * @param {...object} processMove - A function that's called whenever a move is made.\n   *                                  (state, action, dispatch) => state.\n   * @param {...object} optimisticUpdate - (G, ctx, move) => boolean\n   *                                       Control whether a move should\n   *                                       be executed optimistically on\n   *                                       the client while waiting for\n   *                                       the result of execution from\n   *                                       the server.\n   * @param {...object} canMakeMove - (G, ctx, moveName) => boolean\n   *                                  Predicate to determine whether a\n   *                                  particular move is allowed at\n   *                                  this time.\n   *\n   * @param {...object} canUndoMove - (G, ctx, moveName) => boolean\n   *                                  Predicate to determine whether a\n   *                                  particular move is undoable at this\n   *                                  time.\n   *\n   * @param {Array} redactedMoves - List of moves to be redacted\n   *                                from the log.\n   */\n\n\n  function Flow(_ref) {\n    var ctx$$1 = _ref.ctx,\n        events = _ref.events,\n        enabledEvents = _ref.enabledEvents,\n        init = _ref.init,\n        _processMove = _ref.processMove,\n        optimisticUpdate = _ref.optimisticUpdate,\n        _canMakeMove = _ref.canMakeMove,\n        canUndoMove = _ref.canUndoMove,\n        redactedMoves = _ref.redactedMoves;\n    if (!ctx$$1) ctx$$1 = function ctx$$1() {\n      return {};\n    };\n    if (!events) events = {};\n    if (!enabledEvents) enabledEvents = {};\n    if (!init) init = function init(state) {\n      return state;\n    };\n    if (!_processMove) _processMove = function processMove(state) {\n      return state;\n    };\n    if (!_canMakeMove) _canMakeMove = function canMakeMove() {\n      return true;\n    };\n    if (!canUndoMove) canUndoMove = function canUndoMove() {\n      return true;\n    };\n\n    if (optimisticUpdate === undefined) {\n      optimisticUpdate = function optimisticUpdate() {\n        return true;\n      };\n    }\n\n    var dispatch = function dispatch(state, action) {\n      var payload = action.payload;\n\n      if (events.hasOwnProperty(payload.type)) {\n        var context = {\n          playerID: payload.playerID,\n          dispatch: dispatch\n        };\n        var logEntry = {\n          action: action,\n          _stateID: state._stateID,\n          turn: state.ctx.turn,\n          phase: state.ctx.phase\n        };\n        var deltalog = [].concat(_toConsumableArray(state.deltalog || []), [logEntry]);\n        state = _objectSpread({}, state, {\n          deltalog: deltalog\n        });\n        var args = [state].concat(payload.args);\n        return events[payload.type].apply(context, args);\n      }\n\n      return state;\n    };\n\n    return {\n      ctx: ctx$$1,\n      init: init,\n      canUndoMove: canUndoMove,\n      redactedMoves: redactedMoves,\n      eventNames: Object.getOwnPropertyNames(events),\n      enabledEventNames: Object.getOwnPropertyNames(enabledEvents),\n      processMove: function processMove(state, action) {\n        return _processMove(state, action, dispatch);\n      },\n      processGameEvent: function processGameEvent(state, action) {\n        return dispatch(state, action, dispatch);\n      },\n      optimisticUpdate: optimisticUpdate,\n      canPlayerCallEvent: function canPlayerCallEvent(G$$1, ctx$$1, playerID) {\n        return ctx$$1.currentPlayer == playerID && ctx$$1.actionPlayers.includes(playerID);\n      },\n      canPlayerMakeMove: function canPlayerMakeMove(G$$1, ctx$$1, playerID) {\n        var actionPlayers = ctx$$1.actionPlayers || [];\n        return actionPlayers.includes(playerID);\n      },\n      canMakeMove: function canMakeMove(G$$1, ctx$$1, moveName) {\n        // Disallow moves once the game is over.\n        if (ctx$$1.gameover !== undefined) return false; // User-provided move validation.\n\n        return _canMakeMove(G$$1, ctx$$1, moveName);\n      }\n    };\n  }\n  /**\n   * FlowWithPhases\n   *\n   * A very customizable game flow that introduces phases to the\n   * game. Each phase can be configured with:\n   * - A custom turn order.\n   * - Automatically executed setup / cleanup code.\n   * - Custom phase end conditions.\n   * - A move whitelist that disallows other moves during the phase.\n   *\n   * @param {...object} movesPerTurn - End the turn automatically after a certain number\n   *                                   of moves (default: undefined, i.e. the turn does\n   *                                   not automatically end after a certain number of moves).\n   *\n   * @param {...object} endTurnIf - The turn automatically ends if this\n   *                                returns a truthy value\n   *                                (checked after each move).\n   *                                If the return value is { next: playerID },\n   *                                that player is the next player\n   *                                (instead of following the turn order).\n   *                                (G, ctx) => boolean|object\n   *\n   * @param {...object} endGameIf - The game automatically ends if this function\n   *                                returns anything (checked after each move).\n   *                                The return value is available at ctx.gameover.\n   *                                (G, ctx) => {}\n   *\n   * @param {...object} onTurnBegin - Any code to run when a turn begins.\n   *                                 (G, ctx) => G\n   *\n   * @param {...object} onTurnEnd - Any code to run when a turn ends.\n   *                                (G, ctx) => G\n   *\n   * @param {...object} onMove - Any code to run at the end of a move.\n   *                             (G, ctx, { type: 'moveName', args: [] }) => G\n   *\n   * @param {...object} turnOrder - Customize the turn order (see turn-order.js).\n   *\n   * @param {...object} endTurn - Set to false to disable the `endTurn` event.\n   *\n   * @param {...object} endPhase - Set to false to disable the `endPhase` event.\n   *\n   * @param {...object} endGame - Set to true to enable the `endGame` event.\n   *\n   * @param {...object} setActionPlayers - Set to true to enable the `setActionPlayers` event.\n   *\n   * @param {...object} allowedMoves - List of moves that are allowed.\n   *                                   This can be either a list of\n   *                                   move names or a function with the\n   *                                   signature (G, ctx) => [].\n   *                                   (default: null, i.e. all moves are allowed).\n   *\n   * @param {...object} undoableMoves - List of moves that are undoable,\n   *                                   (default: null, i.e. all moves are undoable).\n   *\n   * @param {Array} redactedMoves - List of moves to be redacted\n   *                                from the log.\n   *\n   * @param {object} game - The game object.\n   *\n   * @param {...object} optimisticUpdate - (G, ctx, move) => boolean\n   *                                       Control whether a move should\n   *                                       be executed optimistically on\n   *                                       the client while waiting for\n   *                                       the result of execution from\n   *                                       the server.\n   *\n   * @param {...object} phases - A map of phases in the game.\n   *\n   * Each phase is described by an object whose key is the phase name.\n   *\n   * All the properties below override their global equivalents\n   * above whenever they are defined (i.e. the global setting\n   * is used if a phase-specific setting is absent).\n   *\n   * {\n   *   // Any setup code to run before the phase begins.\n   *   onPhaseBegin: (G, ctx) => G,\n   *\n   *   // Any cleanup code to run after the phase ends.\n   *   onPhaseEnd: (G, ctx) => G,\n   *\n   *   // The phase ends if this function returns a truthy value.\n   *   // If the return value is of the form { next: 'phase name' }\n   *   // then that will be chosen as the next phase.\n   *   endPhaseIf: (G, ctx) => boolean|object,\n   *\n   *   Phase-specific options that override their global equivalents:\n   *\n   *   // A phase-specific endTurnIf.\n   *   endTurnIf: (G, ctx) => boolean|object,\n   *\n   *   // A phase-specific endGameIf.\n   *   endGameIf: (G, ctx) => {},\n   *\n   *   // A phase-specific onTurnBegin\n   *   onTurnBegin: (G, ctx) => G,\n   *\n   *   // A phase-specific onTurnEnd.\n   *   onTurnEnd: (G, ctx) => G,\n   *\n   *   // A phase-specific onMove.\n   *   onMove - (G, ctx) => G,\n   *\n   *   // A phase-specific turnOrder.\n   *   turnOrder: TurnOrder.DEFAULT,\n   *\n   *   // A phase-specific movesPerTurn.\n   *   movesPerTurn: integer,\n   *\n   *   // List of moves or a function that returns a list of moves\n   *   // that are allowed in this phase.\n   *   allowedMoves: (G, ctx) => ['moveA', ...],\n   *\n   *   // List of moves that are undoable.\n   *   undoableMoves: ['moveA', ...],\n   * }\n   */\n\n\n  function FlowWithPhases(_ref2) {\n    var phases = _ref2.phases,\n        startingPhase = _ref2.startingPhase,\n        movesPerTurn = _ref2.movesPerTurn,\n        endTurnIf = _ref2.endTurnIf,\n        endGameIf = _ref2.endGameIf,\n        onTurnBegin = _ref2.onTurnBegin,\n        onTurnEnd = _ref2.onTurnEnd,\n        onMove = _ref2.onMove,\n        turnOrder = _ref2.turnOrder,\n        endTurn = _ref2.endTurn,\n        endPhase = _ref2.endPhase,\n        endGame = _ref2.endGame,\n        setActionPlayers = _ref2.setActionPlayers,\n        undoableMoves = _ref2.undoableMoves,\n        allowedMoves = _ref2.allowedMoves,\n        redactedMoves = _ref2.redactedMoves,\n        _optimisticUpdate = _ref2.optimisticUpdate,\n        game = _ref2.game; // Attach defaults.\n\n    if (endPhase === undefined && phases) {\n      endPhase = true;\n    }\n\n    if (endTurn === undefined) {\n      endTurn = true;\n    }\n\n    if (endGame === undefined) {\n      endGame = false;\n    }\n\n    if (setActionPlayers === undefined) {\n      setActionPlayers = false;\n    }\n\n    if (_optimisticUpdate === undefined) {\n      _optimisticUpdate = function optimisticUpdate() {\n        return true;\n      };\n    }\n\n    if (game === undefined) {\n      game = {\n        plugins: []\n      };\n    }\n\n    if (!phases) phases = {};\n    if (!startingPhase) startingPhase = 'default';\n    if (!endTurnIf) endTurnIf = function endTurnIf() {\n      return false;\n    };\n    if (!endGameIf) endGameIf = function endGameIf() {\n      return undefined;\n    };\n    if (!onTurnBegin) onTurnBegin = function onTurnBegin(G$$1) {\n      return G$$1;\n    };\n    if (!onTurnEnd) onTurnEnd = function onTurnEnd(G$$1) {\n      return G$$1;\n    };\n    if (!onMove) onMove = function onMove(G$$1) {\n      return G$$1;\n    };\n    if (!turnOrder) turnOrder = TurnOrder.DEFAULT;\n    if (allowedMoves === undefined) allowedMoves = null;\n    if (undoableMoves === undefined) undoableMoves = null;\n    var phaseMap = phases;\n\n    if ('default' in phaseMap) {\n      error('cannot specify phase with name \"default\"');\n    }\n\n    phaseMap['default'] = {};\n\n    for (var phase in phaseMap) {\n      var conf = phaseMap[phase];\n\n      if (conf.endPhaseIf === undefined) {\n        conf.endPhaseIf = function () {\n          return undefined;\n        };\n      }\n\n      if (conf.onPhaseBegin === undefined) {\n        conf.onPhaseBegin = function (G$$1) {\n          return G$$1;\n        };\n      }\n\n      conf.onPhaseBegin = FnWrap(conf.onPhaseBegin, game);\n\n      if (conf.onPhaseEnd === undefined) {\n        conf.onPhaseEnd = function (G$$1) {\n          return G$$1;\n        };\n      }\n\n      conf.onPhaseEnd = FnWrap(conf.onPhaseEnd, game);\n\n      if (conf.movesPerTurn === undefined) {\n        conf.movesPerTurn = movesPerTurn;\n      }\n\n      if (conf.endTurnIf === undefined) {\n        conf.endTurnIf = endTurnIf;\n      }\n\n      if (conf.endGameIf === undefined) {\n        conf.endGameIf = endGameIf;\n      }\n\n      if (conf.onTurnBegin === undefined) {\n        conf.onTurnBegin = onTurnBegin;\n      }\n\n      conf.onTurnBegin = FnWrap(conf.onTurnBegin, game);\n\n      if (conf.onTurnEnd === undefined) {\n        conf.onTurnEnd = onTurnEnd;\n      }\n\n      conf.onTurnEnd = FnWrap(conf.onTurnEnd, game);\n\n      if (conf.onMove === undefined) {\n        conf.onMove = onMove;\n      }\n\n      conf.onMove = FnWrap(conf.onMove, game);\n\n      if (conf.turnOrder === undefined) {\n        conf.turnOrder = turnOrder;\n      }\n\n      if (conf.undoableMoves === undefined) {\n        conf.undoableMoves = undoableMoves;\n      }\n\n      if (conf.allowedMoves === undefined) {\n        conf.allowedMoves = allowedMoves;\n      }\n\n      if (typeof conf.allowedMoves !== 'function') {\n        (function () {\n          var t = conf.allowedMoves;\n\n          conf.allowedMoves = function () {\n            return t;\n          };\n        })();\n      }\n    }\n\n    var shouldEndPhase = function shouldEndPhase(_ref3) {\n      var G$$1 = _ref3.G,\n          ctx$$1 = _ref3.ctx;\n      var conf = phaseMap[ctx$$1.phase];\n      return conf.endPhaseIf(G$$1, ctx$$1);\n    };\n\n    var shouldEndTurn = function shouldEndTurn(_ref4) {\n      var G$$1 = _ref4.G,\n          ctx$$1 = _ref4.ctx;\n      var conf = phaseMap[ctx$$1.phase];\n      var currentPlayerMoves = ctx$$1.stats.turn.numMoves[ctx$$1.currentPlayer] || 0;\n\n      if (conf.movesPerTurn && currentPlayerMoves >= conf.movesPerTurn) {\n        return true;\n      }\n\n      return conf.endTurnIf(G$$1, ctx$$1);\n    }; // Helper to perform start-of-phase initialization.\n\n\n    var startPhase = function startPhase(state, config) {\n      var G$$1 = config.onPhaseBegin(state.G, state.ctx);\n      var ctx$$1 = InitTurnOrderState(G$$1, state.ctx, config.turnOrder); // Allow plugins to modify G and ctx at the beginning of a phase.\n\n      G$$1 = G.onPhaseBegin(G$$1, ctx$$1, game);\n      ctx$$1 = ctx.onPhaseBegin(ctx$$1, game); // Reset stats.\n\n      ctx$$1.stats = _objectSpread({}, ctx$$1.stats, {\n        phase: _objectSpread({}, ctx$$1.stats.phase, {\n          numMoves: {},\n          allPlayed: false\n        })\n      });\n      var allowedMoves = config.allowedMoves(G$$1, ctx$$1);\n      return _objectSpread({}, state, {\n        G: G$$1,\n        ctx: _objectSpread({}, ctx$$1, {\n          allowedMoves: allowedMoves\n        })\n      });\n    };\n\n    var startTurn = function startTurn(state, config) {\n      var G$$1 = config.onTurnBegin(state.G, state.ctx);\n      var plainCtx = ContextEnhancer.detachAllFromContext(state.ctx);\n      var _undo = [{\n        G: G$$1,\n        ctx: plainCtx\n      }];\n\n      var ctx$$1 = _objectSpread({}, state.ctx);\n\n      ctx$$1.allowedMoves = config.allowedMoves(G$$1, ctx$$1); // Reset stats.\n\n      ctx$$1.stats = _objectSpread({}, ctx$$1.stats, {\n        turn: _objectSpread({}, ctx$$1.stats.turn, {\n          numMoves: {},\n          allPlayed: false\n        })\n      });\n      return _objectSpread({}, state, {\n        G: G$$1,\n        ctx: ctx$$1,\n        _undo: _undo,\n        _redo: []\n      });\n    };\n\n    var startGame = function startGame(state) {\n      if (!(state.ctx.phase in phaseMap)) {\n        error('invalid startingPhase: ' + state.ctx.phase);\n        return state;\n      }\n\n      var conf = phaseMap[state.ctx.phase];\n      state = startPhase(state, conf);\n      state = startTurn(state, conf);\n      return state;\n    };\n    /**\n     * endPhase (game event)\n     *\n     * Ends the current phase.\n     * Also runs any phase cleanup code and setup code for the\n     * next phase (if any).\n     *\n     * The next phase is chosen in a round-robin fashion, with the\n     * option to override that by passing nextPhase.\n     *\n     * If this call results in a cycle, the phase is reset to\n     * the default phase.\n     */\n\n\n    function endPhaseEvent(state, arg, visitedPhases) {\n      var G$$1 = state.G;\n      var ctx$$1 = state.ctx; // Run any cleanup code for the phase that is about to end.\n\n      var conf = phaseMap[ctx$$1.phase];\n      G$$1 = conf.onPhaseEnd(G$$1, ctx$$1);\n      var gameover = conf.endGameIf(G$$1, ctx$$1);\n\n      if (gameover !== undefined) {\n        return _objectSpread({}, state, {\n          G: G$$1,\n          ctx: _objectSpread({}, ctx$$1, {\n            gameover: gameover\n          })\n        });\n      }\n\n      var prevPhase = ctx$$1.phase; // Update the phase.\n\n      if (arg && arg !== true) {\n        if (arg.next in phaseMap) {\n          ctx$$1 = _objectSpread({}, ctx$$1, {\n            phase: arg.next,\n            prevPhase: prevPhase\n          });\n        } else {\n          error('invalid argument to endPhase: ' + arg);\n        }\n      } else if (conf.next !== undefined) {\n        ctx$$1 = _objectSpread({}, ctx$$1, {\n          phase: conf.next,\n          prevPhase: prevPhase\n        });\n      } else {\n        ctx$$1 = _objectSpread({}, ctx$$1, {\n          phase: ctx$$1.prevPhase,\n          prevPhase: prevPhase\n        });\n      } // Run any setup code for the new phase.\n\n\n      state = startPhase(_objectSpread({}, state, {\n        G: G$$1,\n        ctx: ctx$$1\n      }), phaseMap[ctx$$1.phase]);\n      var origTurn = state.ctx.turn; // End the new phase automatically if necessary.\n      // In order to avoid infinite loops, the `default`\n      // phase is chosen as the next phase the moment we\n      // end up at a phase that we've already visited when\n      // we processed the endPhase event that kicked of this\n      // chain of events.\n\n      if (!visitedPhases) visitedPhases = {};\n\n      if (ctx$$1.phase in visitedPhases) {\n        state = this.dispatch(state, automaticGameEvent('endPhase', [{\n          next: 'default'\n        }, visitedPhases], this.playerID));\n      } else {\n        visitedPhases[ctx$$1.phase] = true;\n        var end = shouldEndPhase(state);\n\n        if (end) {\n          state = this.dispatch(state, automaticGameEvent('endPhase', [end, visitedPhases], this.playerID));\n        }\n      } // End turn if endTurnIf returns something\n      // (and the turn has not already been ended by a nested endPhase call).\n\n\n      var endTurn = shouldEndTurn(state);\n\n      if (endTurn && state.ctx.turn == origTurn) {\n        state = this.dispatch(state, automaticGameEvent('endTurn', [endTurn], this.playerID));\n      }\n\n      return state;\n    }\n    /**\n     * endTurn (game event)\n     *\n     * Ends the current turn.\n     * Passes the turn to the next turn in a round-robin fashion.\n     */\n\n\n    function endTurnEvent(state, arg) {\n      var _state = state,\n          G$$1 = _state.G,\n          ctx$$1 = _state.ctx;\n      var conf = phaseMap[ctx$$1.phase]; // Prevent ending the turn if movesPerTurn haven't been made.\n\n      var currentPlayerMoves = ctx$$1.stats.turn.numMoves[ctx$$1.currentPlayer] || 0;\n\n      if (conf.movesPerTurn && currentPlayerMoves < conf.movesPerTurn) {\n        return state;\n      } // Run turn-end triggers.\n\n\n      G$$1 = conf.onTurnEnd(G$$1, ctx$$1); // Update gameover.\n\n      var gameover = conf.endGameIf(G$$1, ctx$$1);\n\n      if (gameover !== undefined) {\n        return _objectSpread({}, state, {\n          G: G$$1,\n          ctx: _objectSpread({}, ctx$$1, {\n            gameover: gameover\n          })\n        });\n      }\n\n      var endPhase = false; // Update turn order state.\n\n      {\n        var _UpdateTurnOrderState = UpdateTurnOrderState(G$$1, ctx$$1, conf.turnOrder, arg),\n            a = _UpdateTurnOrderState.endPhase,\n            b = _UpdateTurnOrderState.ctx;\n\n        endPhase = a;\n        ctx$$1 = b;\n      } // Update turn.\n\n      var turn = ctx$$1.turn + 1; // Update state.\n\n      ctx$$1 = _objectSpread({}, ctx$$1, {\n        turn: turn\n      });\n      state = _objectSpread({}, state, {\n        G: G$$1,\n        ctx: ctx$$1\n      }); // End phase if condition is met.\n\n      var endPhaseArg = shouldEndPhase(state);\n\n      if (endPhaseArg) {\n        endPhase = true;\n      }\n\n      if (endPhase) {\n        return this.dispatch(state, automaticGameEvent('endPhase', [endPhaseArg], this.playerID));\n      }\n\n      return startTurn(state, conf);\n    }\n\n    function endGameEvent(state, arg) {\n      if (arg === undefined) {\n        arg = true;\n      }\n\n      return _objectSpread({}, state, {\n        ctx: _objectSpread({}, state.ctx, {\n          gameover: arg\n        })\n      });\n    }\n\n    function updateStats(state, key, playerID) {\n      var moves = (state.ctx.stats[key].numMoves[playerID] || 0) + 1;\n\n      var numMoves = _objectSpread({}, state.ctx.stats[key].numMoves, _defineProperty({}, playerID, moves));\n\n      var t = _objectSpread({}, state.ctx.stats[key], {\n        numMoves: numMoves\n      });\n\n      if (Object.keys(numMoves).length == state.ctx.numPlayers) {\n        t.allPlayed = true;\n      }\n\n      var stats = _objectSpread({}, state.ctx.stats, _defineProperty({}, key, t));\n\n      var ctx$$1 = _objectSpread({}, state.ctx, {\n        stats: stats\n      });\n\n      return _objectSpread({}, state, {\n        ctx: ctx$$1\n      });\n    }\n\n    function processMove(state, action, dispatch) {\n      var conf = phaseMap[state.ctx.phase];\n      state = updateStats(state, 'turn', action.playerID);\n      state = updateStats(state, 'phase', action.playerID); // Update actionPlayers if _actionPlayersOnce is set.\n\n      var actionPlayers = state.ctx.actionPlayers;\n      var actionPlayersOnceDone = false;\n\n      if (state.ctx._actionPlayersOnce) {\n        var playerID = action.playerID;\n        actionPlayers = actionPlayers.filter(function (id) {\n          return id !== playerID;\n        });\n\n        if (actionPlayers.length == 0 && conf.turnOrder.endPhaseOnceDone) {\n          actionPlayersOnceDone = true;\n        }\n      }\n\n      state = _objectSpread({}, state, {\n        ctx: _objectSpread({}, state.ctx, {\n          actionPlayers: actionPlayers\n        })\n      });\n      var G$$1 = conf.onMove(state.G, state.ctx, action);\n      state = _objectSpread({}, state, {\n        G: G$$1\n      });\n      var origTurn = state.ctx.turn;\n      var gameover = conf.endGameIf(state.G, state.ctx); // End the phase automatically if endPhaseIf is true or if endGameIf returns.\n\n      var endPhase = shouldEndPhase(state) || actionPlayersOnceDone;\n\n      if (endPhase || gameover !== undefined) {\n        state = dispatch(state, automaticGameEvent('endPhase', [endPhase], action.playerID)); // Update to the new phase configuration\n\n        conf = phaseMap[state.ctx.phase];\n      } // End the turn automatically if endTurnIf is true or if endGameIf returns.\n      // (but not if endPhase above already ends the turn).\n\n\n      var endTurn = shouldEndTurn(state);\n\n      if (state.ctx.turn == origTurn && (endTurn || gameover !== undefined)) {\n        state = dispatch(state, automaticGameEvent('endTurn', [endTurn], action.playerID));\n      } // End the game automatically if endGameIf returns.\n\n\n      if (gameover !== undefined) {\n        return _objectSpread({}, state, {\n          ctx: _objectSpread({}, state.ctx, {\n            gameover: gameover\n          })\n        });\n      } // Update allowedMoves.\n\n\n      var allowedMoves = conf.allowedMoves(state.G, state.ctx);\n      state = _objectSpread({}, state, {\n        ctx: _objectSpread({}, state.ctx, {\n          allowedMoves: allowedMoves\n        })\n      }); // Update undo / redo state.\n\n      if (!endTurn) {\n        var undo$$1 = state._undo || [];\n        var moveType = action.type;\n        var plainCtx = ContextEnhancer.detachAllFromContext(state.ctx);\n        state = _objectSpread({}, state, {\n          _undo: [].concat(_toConsumableArray(undo$$1), [{\n            G: state.G,\n            ctx: plainCtx,\n            moveType: moveType\n          }]),\n          _redo: []\n        });\n      }\n\n      return state;\n    }\n\n    var canMakeMove = function canMakeMove(G$$1, ctx$$1, moveName) {\n      var conf = phaseMap[ctx$$1.phase];\n      var moves = conf.allowedMoves(G$$1, ctx$$1);\n      if (!moves) return true;\n      return moves.includes(moveName);\n    };\n\n    var canUndoMove = function canUndoMove(G$$1, ctx$$1, moveName) {\n      var conf = phaseMap[ctx$$1.phase];\n      if (!conf.undoableMoves) return true;\n      return conf.undoableMoves.includes(moveName);\n    };\n\n    var events = {\n      endTurn: endTurnEvent,\n      endPhase: endPhaseEvent,\n      endGame: endGameEvent,\n      setActionPlayers: SetActionPlayersEvent\n    };\n    var enabledEvents = {};\n\n    if (endTurn) {\n      enabledEvents['endTurn'] = true;\n    }\n\n    if (endPhase) {\n      enabledEvents['endPhase'] = true;\n    }\n\n    if (endGame) {\n      enabledEvents['endGame'] = true;\n    }\n\n    if (setActionPlayers) {\n      enabledEvents['setActionPlayers'] = true;\n    }\n\n    return Flow({\n      ctx: function ctx$$1(numPlayers) {\n        return {\n          numPlayers: numPlayers,\n          turn: 0,\n          currentPlayer: '0',\n          actionPlayers: ['0'],\n          currentPlayerMoves: 0,\n          playOrder: _toConsumableArray(new Array(numPlayers)).map(function (d, i) {\n            return i + '';\n          }),\n          playOrderPos: 0,\n          stats: {\n            turn: {\n              numMoves: {}\n            },\n            phase: {\n              numMoves: {}\n            }\n          },\n          allPlayed: false,\n          phase: startingPhase,\n          prevPhase: 'default'\n        };\n      },\n      init: function init(state) {\n        return startGame(state);\n      },\n      optimisticUpdate: function optimisticUpdate(G$$1, ctx$$1, action) {\n        // Some random code was executed.\n        if (ctx$$1._random !== undefined && ctx$$1._random.prngstate !== undefined) {\n          return false;\n        }\n\n        return _optimisticUpdate(G$$1, ctx$$1, action);\n      },\n      events: events,\n      enabledEvents: enabledEvents,\n      processMove: processMove,\n      canMakeMove: canMakeMove,\n      canUndoMove: canUndoMove,\n      redactedMoves: redactedMoves\n    });\n  }\n  /**\n   * Game\n   *\n   * Helper to generate the game move reducer. The returned\n   * reducer has the following signature:\n   *\n   * (G, action, ctx) => {}\n   *\n   * You can roll your own if you like, or use any Redux\n   * addon to generate such a reducer.\n   *\n   * The convention used in this framework is to\n   * have action.type contain the name of the move, and\n   * action.args contain any additional arguments as an\n   * Array.\n   *\n   * Game({\n   *   name: 'tic-tac-toe',\n   *\n   *   setup: (numPlayers) => {\n   *     const G = {...};\n   *     return G;\n   *   },\n   *\n   *   plugins: [plugin1, plugin2, ...],\n   *\n   *   moves: {\n   *     'moveWithoutArgs': (G, ctx) => {\n   *       return Object.assign({}, G, ...);\n   *     },\n   *     'moveWithArgs': (G, ctx, arg0, arg1) => {\n   *       return Object.assign({}, G, ...);\n   *     }\n   *   },\n   *\n   *   playerView: (G, ctx, playerID) => { ... },\n   *\n   *   flow: {\n   *     endGameIf: (G, ctx) => { ... },\n   *     endTurnIf: (G, ctx) => { ... },\n   *\n   *     phases: {\n   *       A: { onPhaseBegin: (G, ctx) => G, onPhaseEnd: (G, ctx) => G },\n   *       B: { onPhaseBegin: (G, ctx) => G, onPhaseEnd: (G, ctx) => G },\n   *       ...\n   *     }\n   *   },\n   * })\n   *\n   * @param {...object} setup - Function that returns the initial state of G.\n   *\n   * @param {...object} moves - A dictionary of move functions.\n   *\n   * @param {...object} playerView - A function that returns a\n   *                                 derivative of G tailored for\n   *                                 the specified player.\n   *\n   * @param {...object} flow - Customize the flow of the game (see flow.js).\n   *                           Must contain the return value of Flow().\n   *                           If it contains any other object, it is presumed to be a\n   *                           configuration object for FlowWithPhases().\n   *\n   * @param {...object} seed - Seed for the PRNG.\n   *\n   * @param {Array} plugins - List of plugins. Each plugin is an object like the following:\n   *                          {\n   *                            // Optional: Wraps a move / trigger function and returns\n   *                            // the wrapped function. The wrapper can do anything\n   *                            // it wants, but will typically be used to customize G.\n   *                            fnWrap: (fn) => {\n   *                              return (G, ctx, ...args) => {\n   *                                G = preprocess(G);\n   *                                G = fn(G, ctx, ...args);\n   *                                G = postprocess(G);\n   *                                return G;\n   *                              };\n   *                            },\n   *\n   *                            // Optional: Called during setup. Can be used to\n   *                            // augment G with additional state during setup.\n   *                            setup: (G, ctx) => G,\n   *                          }\n   */\n\n\n  function Game(game) {\n    if (game.name === undefined) game.name = 'default';\n    if (game.setup === undefined) game.setup = function () {\n      return {};\n    };\n    if (game.moves === undefined) game.moves = {};\n    if (game.playerView === undefined) game.playerView = function (G$$1) {\n      return G$$1;\n    };\n    if (game.plugins === undefined) game.plugins = [];\n\n    if (!game.flow || game.flow.processGameEvent === undefined) {\n      game.flow = FlowWithPhases(_objectSpread({\n        game: game\n      }, game.flow));\n    }\n\n    return _objectSpread({}, game, {\n      moveNames: Object.getOwnPropertyNames(game.moves),\n      processMove: function processMove(G$$1, action, ctx$$1) {\n        if (game.moves.hasOwnProperty(action.type)) {\n          var ctxWithPlayerID = _objectSpread({}, ctx$$1, {\n            playerID: action.playerID\n          });\n\n          var args = [G$$1, ctxWithPlayerID].concat(action.args);\n          var fn = FnWrap(game.moves[action.type], game);\n          return fn.apply(void 0, _toConsumableArray(args));\n        }\n\n        return G$$1;\n      }\n    });\n  }\n  /*\n   * Copyright 2018 The boardgame.io Authors\n   *\n   * Use of this source code is governed by a MIT-style\n   * license that can be found in the LICENSE file or at\n   * https://opensource.org/licenses/MIT.\n   */\n\n  /**\n   * PlayerView reducers.\n   */\n\n\n  var PlayerView = {\n    /**\n     * STRIP_SECRETS\n     *\n     * Reducer which removes a key named `secret` and\n     * removes all the keys in `players`, except for the one\n     * corresponding to the current playerID.\n     */\n    STRIP_SECRETS: function STRIP_SECRETS(G, ctx, playerID) {\n      var r = _objectSpread({}, G);\n\n      if (r.secret !== undefined) {\n        delete r.secret;\n      }\n\n      if (r.players) {\n        r.players = _defineProperty({}, playerID, r.players[playerID]);\n      }\n\n      return r;\n    }\n  };\n  /*\n   * Copyright 2017 The boardgame.io Authors\n   *\n   * Use of this source code is governed by a MIT-style\n   * license that can be found in the LICENSE file or at\n   * https://opensource.org/licenses/MIT.\n   */\n\n  exports.Game = Game;\n  exports.InitializeGame = InitializeGame;\n  exports.CreateGameReducer = CreateGameReducer;\n  exports.Flow = Flow;\n  exports.FlowWithPhases = FlowWithPhases;\n  exports.TurnOrder = TurnOrder;\n  exports.Pass = Pass;\n  exports.PlayerView = PlayerView;\n  exports.INVALID_MOVE = INVALID_MOVE;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}