{"ast":null,"code":"var Flatted = function (Primitive, primitive) {\n  /*!\n   * ISC License\n   *\n   * Copyright (c) 2018, Andrea Giammarchi, @WebReflection\n   *\n   * Permission to use, copy, modify, and/or distribute this software for any\n   * purpose with or without fee is hereby granted, provided that the above\n   * copyright notice and this permission notice appear in all copies.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n   * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n   * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n   * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n   * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n   * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n   * PERFORMANCE OF THIS SOFTWARE.\n   */\n  var Flatted = {\n    parse: function parse(text) {\n      var input = JSON.parse(text, Primitives).map(primitives);\n      var value = input[0];\n      return typeof value === 'object' && value ? revive(input, new Set(), value) : value;\n    },\n    stringify: function stringify(value) {\n      for (var firstRun, known = new Map(), input = [], output = [], i = +set(known, input, value), replace = function (key, value) {\n        if (firstRun) return firstRun = !firstRun, value;\n\n        switch (typeof value) {\n          case 'object':\n            if (value === null) return value;\n\n          case primitive:\n            return known.get(value) || set(known, input, value);\n        }\n\n        return value;\n      }; i < input.length; i++) {\n        firstRun = true;\n        output[i] = JSON.stringify(input[i], replace);\n      }\n\n      return '[' + output.join(',') + ']';\n    }\n  };\n  return Flatted;\n\n  function revive(input, parsed, output) {\n    return Object.keys(output).reduce(function (output, key) {\n      var value = output[key];\n\n      if (value instanceof Primitive) {\n        var tmp = input[value];\n\n        if (typeof tmp === 'object' && !parsed.has(tmp)) {\n          parsed.add(tmp);\n          output[key] = revive(input, parsed, tmp);\n        } else {\n          output[key] = tmp;\n        }\n      }\n\n      return output;\n    }, output);\n  }\n\n  function set(known, input, value) {\n    var index = Primitive(input.push(value) - 1);\n    known.set(value, index);\n    return index;\n  }\n\n  function primitives(value) {\n    return value instanceof Primitive ? Primitive(value) : value;\n  }\n\n  function Primitives(key, value) {\n    return typeof value === primitive ? new Primitive(value) : value;\n  }\n}(String, 'string');\n\nexport default Flatted;\nexport const parse = Flatted.parse;\nexport const stringify = Flatted.stringify;","map":null,"metadata":{},"sourceType":"module"}