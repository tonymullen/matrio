{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('flatted'), require('immer')) : typeof define === 'function' && define.amd ? define(['exports', 'flatted', 'immer'], factory) : (global = global || self, factory(global.AI = {}, global.Flatted, global.immer));\n})(this, function (exports, flatted, produce) {\n  'use strict';\n\n  produce = produce && produce.hasOwnProperty('default') ? produce['default'] : produce;\n\n  function _typeof(obj) {\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function _objectSpread(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n      var ownKeys = Object.keys(source);\n\n      if (typeof Object.getOwnPropertySymbols === 'function') {\n        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n          return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n        }));\n      }\n\n      ownKeys.forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    }\n\n    return target;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n\n    for (i = 0; i < sourceKeys.length; i++) {\n      key = sourceKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      target[key] = source[key];\n    }\n\n    return target;\n  }\n\n  function _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n\n    var key, i;\n\n    if (Object.getOwnPropertySymbols) {\n      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n      for (i = 0; i < sourceSymbolKeys.length; i++) {\n        key = sourceSymbolKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n        target[key] = source[key];\n      }\n    }\n\n    return target;\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n      return call;\n    }\n\n    return _assertThisInitialized(self);\n  }\n\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    }\n  }\n\n  function _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n  }\n  /*\n   * Copyright 2017 The boardgame.io Authors\n   *\n   * Use of this source code is governed by a MIT-style\n   * license that can be found in the LICENSE file or at\n   * https://opensource.org/licenses/MIT.\n   */\n\n\n  var MAKE_MOVE = 'MAKE_MOVE';\n  var GAME_EVENT = 'GAME_EVENT';\n  var REDO = 'REDO';\n  var RESET = 'RESET';\n  var SYNC = 'SYNC';\n  var UNDO = 'UNDO';\n  var UPDATE = 'UPDATE'; // Inlined version of Alea from https://github.com/davidbau/seedrandom.\n\n  /*\n   * Copyright 2015 David Bau.\n   *\n   * Permission is hereby granted, free of charge,\n   * to any person obtaining a copy of this software\n   * and associated documentation files (the \"Software\"),\n   * to deal in the Software without restriction, including\n   * without limitation the rights to use, copy, modify, merge,\n   * publish, distribute, sublicense, and/or sell copies of the\n   * Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall\n   * be included in all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n   * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n   * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n   * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n   * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n   * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n   * DEALINGS IN THE SOFTWARE.\n   */\n\n  function Alea(seed) {\n    var me = this,\n        mash = Mash();\n\n    me.next = function () {\n      var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n\n      me.s0 = me.s1;\n      me.s1 = me.s2;\n      return me.s2 = t - (me.c = t | 0);\n    }; // Apply the seeding algorithm from Baagoe.\n\n\n    me.c = 1;\n    me.s0 = mash(' ');\n    me.s1 = mash(' ');\n    me.s2 = mash(' ');\n    me.s0 -= mash(seed);\n\n    if (me.s0 < 0) {\n      me.s0 += 1;\n    }\n\n    me.s1 -= mash(seed);\n\n    if (me.s1 < 0) {\n      me.s1 += 1;\n    }\n\n    me.s2 -= mash(seed);\n\n    if (me.s2 < 0) {\n      me.s2 += 1;\n    }\n\n    mash = null;\n  }\n\n  function copy(f, t) {\n    t.c = f.c;\n    t.s0 = f.s0;\n    t.s1 = f.s1;\n    t.s2 = f.s2;\n    return t;\n  }\n\n  function Mash() {\n    var n = 0xefc8249d;\n\n    var mash = function mash(data) {\n      data = data.toString();\n\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n\n    return mash;\n  }\n\n  function alea(seed, opts) {\n    var xg = new Alea(seed),\n        state = opts && opts.state,\n        prng = xg.next;\n    prng.quick = prng;\n\n    if (state) {\n      if (_typeof(state) == 'object') copy(state, xg);\n\n      prng.state = function () {\n        return copy(xg, {});\n      };\n    }\n\n    return prng;\n  }\n  /**\n   * Random\n   *\n   * Calls that require a pseudorandom number generator.\n   * Uses a seed from ctx, and also persists the PRNG\n   * state in ctx so that moves can stay pure.\n   */\n\n\n  var Random =\n  /*#__PURE__*/\n  function () {\n    /**\n     * constructor\n     * @param {object} ctx - The ctx object to initialize from.\n     */\n    function Random(ctx) {\n      _classCallCheck(this, Random); // If we are on the client, the seed is not present.\n      // Just use a temporary seed to execute the move without\n      // crashing it. The move state itself is discarded,\n      // so the actual value doesn't matter.\n\n\n      this.state = ctx._random || {\n        seed: '0'\n      };\n    }\n    /**\n     * Updates ctx with the PRNG state.\n     * @param {object} ctx - The ctx object to update.\n     */\n\n\n    _createClass(Random, [{\n      key: \"update\",\n      value: function update(state) {\n        var ctx = _objectSpread({}, state.ctx, {\n          _random: this.state\n        });\n\n        return _objectSpread({}, state, {\n          ctx: ctx\n        });\n      }\n      /**\n       * Attaches the Random API to ctx.\n       * @param {object} ctx - The ctx object to attach to.\n       */\n\n    }, {\n      key: \"attach\",\n      value: function attach(ctx) {\n        return _objectSpread({}, ctx, {\n          random: this._api()\n        });\n      }\n      /**\n       * Generate a random number.\n       */\n\n    }, {\n      key: \"_random\",\n      value: function _random() {\n        var R = this.state;\n        var fn;\n\n        if (R.prngstate === undefined) {\n          // No call to a random function has been made.\n          fn = new alea(R.seed, {\n            state: true\n          });\n        } else {\n          fn = new alea('', {\n            state: R.prngstate\n          });\n        }\n\n        var number = fn();\n        this.state = _objectSpread({}, R, {\n          prngstate: fn.state()\n        });\n        return number;\n      }\n    }, {\n      key: \"_api\",\n      value: function _api() {\n        var random = this._random.bind(this);\n\n        var SpotValue = {\n          D4: 4,\n          D6: 6,\n          D8: 8,\n          D10: 10,\n          D12: 12,\n          D20: 20\n        }; // Generate functions for predefined dice values D4 - D20.\n\n        var predefined = {};\n\n        var _loop = function _loop(key) {\n          var spotvalue = SpotValue[key];\n\n          predefined[key] = function (diceCount) {\n            if (diceCount === undefined) {\n              return Math.floor(random() * spotvalue) + 1;\n            } else {\n              return _toConsumableArray(new Array(diceCount).keys()).map(function () {\n                return Math.floor(random() * spotvalue) + 1;\n              });\n            }\n          };\n        };\n\n        for (var key in SpotValue) {\n          _loop(key);\n        }\n\n        return _objectSpread({}, predefined, {\n          /**\n           * Roll a die of specified spot value.\n           *\n           * @param {number} spotvalue - The die dimension (default: 6).\n           * @param {number} diceCount - number of dice to throw.\n           *                             if not defined, defaults to 1 and returns the value directly.\n           *                             if defined, returns an array containing the random dice values.\n           */\n          Die: function Die(spotvalue, diceCount) {\n            if (spotvalue === undefined) {\n              spotvalue = 6;\n            }\n\n            if (diceCount === undefined) {\n              return Math.floor(random() * spotvalue) + 1;\n            } else {\n              return _toConsumableArray(new Array(diceCount).keys()).map(function () {\n                return Math.floor(random() * spotvalue) + 1;\n              });\n            }\n          },\n\n          /**\n           * Generate a random number between 0 and 1.\n           */\n          Number: function Number() {\n            return random();\n          },\n\n          /**\n           * Shuffle an array.\n           *\n           * @param {Array} deck - The array to shuffle. Does not mutate\n           *                       the input, but returns the shuffled array.\n           */\n          Shuffle: function Shuffle(deck) {\n            var clone = deck.slice(0);\n            var srcIndex = deck.length;\n            var dstIndex = 0;\n            var shuffled = new Array(srcIndex);\n\n            while (srcIndex) {\n              var randIndex = srcIndex * random() | 0;\n              shuffled[dstIndex++] = clone[randIndex];\n              clone[randIndex] = clone[--srcIndex];\n            }\n\n            return shuffled;\n          }\n        });\n      }\n    }]);\n\n    return Random;\n  }();\n  /**\n   * Removes the attached Random api from ctx.\n   *\n   * @param {object} ctx - The ctx object with the Random API attached.\n   * @returns {object} A plain ctx object without the Random API.\n   */\n\n\n  Random.detach = function (ctx) {\n    var random = ctx.random,\n        rest = _objectWithoutProperties(ctx, [\"random\"]); // eslint-disable-line no-unused-vars\n\n\n    return rest;\n  };\n  /**\n   * Generates a new seed from the current date / time.\n   */\n\n\n  Random.seed = function () {\n    return (+new Date()).toString(36).slice(-10);\n  };\n  /*\n   * Copyright 2017 The boardgame.io Authors\n   *\n   * Use of this source code is governed by a MIT-style\n   * license that can be found in the LICENSE file or at\n   * https://opensource.org/licenses/MIT.\n   */\n\n  /**\n   * Generate a move to be dispatched to the game move reducer.\n   *\n   * @param {string} type - The move type.\n   * @param {Array}  args - Additional arguments.\n   * @param {string}  playerID - The ID of the player making this action.\n   * @param {string}  credentials - (optional) The credentials for the player making this action.\n   */\n\n\n  var makeMove = function makeMove(type, args, playerID, credentials) {\n    return {\n      type: MAKE_MOVE,\n      payload: {\n        type: type,\n        args: args,\n        playerID: playerID,\n        credentials: credentials\n      }\n    };\n  };\n  /**\n   * Generate a game event to be dispatched to the flow reducer.\n   *\n   * @param {string} type - The event type.\n   * @param {Array}  args - Additional arguments.\n   * @param {string}  playerID - The ID of the player making this action.\n   * @param {string}  credentials - (optional) The credentials for the player making this action.\n   */\n\n\n  var gameEvent = function gameEvent(type, args, playerID, credentials) {\n    return {\n      type: GAME_EVENT,\n      payload: {\n        type: type,\n        args: args,\n        playerID: playerID,\n        credentials: credentials\n      }\n    };\n  };\n  /**\n   * Generate an automatic game event that is a side-effect of a move.\n   * @param {string} type - The event type.\n   * @param {Array}  args - Additional arguments.\n   * @param {string}  playerID - The ID of the player making this action.\n   * @param {string}  credentials - (optional) The credentials for the player making this action.\n   */\n\n\n  var automaticGameEvent = function automaticGameEvent(type, args, playerID, credentials) {\n    return {\n      type: GAME_EVENT,\n      payload: {\n        type: type,\n        args: args,\n        playerID: playerID,\n        credentials: credentials\n      },\n      automatic: true\n    };\n  };\n  /**\n   * Events\n   */\n\n\n  var Events =\n  /*#__PURE__*/\n  function () {\n    function Events(flow, playerID) {\n      _classCallCheck(this, Events);\n\n      this.flow = flow;\n      this.playerID = playerID;\n      this.dispatch = [];\n    }\n    /**\n     * Attaches the Events API to ctx.\n     * @param {object} ctx - The ctx object to attach to.\n     */\n\n\n    _createClass(Events, [{\n      key: \"attach\",\n      value: function attach(ctx) {\n        var _this = this;\n\n        var events = {};\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          var _loop = function _loop() {\n            var key = _step.value;\n\n            events[key] = function () {\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n\n              _this.dispatch.push({\n                key: key,\n                args: args\n              });\n            };\n          };\n\n          for (var _iterator = this.flow.eventNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            _loop();\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return _objectSpread({}, ctx, {\n          events: events\n        });\n      }\n      /**\n       * Updates ctx with the triggered events.\n       * @param {object} state - The state object { G, ctx }.\n       */\n\n    }, {\n      key: \"update\",\n      value: function update$$1(state) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = this.dispatch[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var item = _step2.value;\n            var action = automaticGameEvent(item.key, item.args, this.playerID);\n            state = _objectSpread({}, state, this.flow.processGameEvent(state, action));\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        return state;\n      }\n    }]);\n\n    return Events;\n  }();\n  /**\n   * Detaches the Events API from ctx.\n   * @param {object} ctx - The ctx object to strip.\n   */\n\n\n  Events.detach = function (ctx) {\n    var events = ctx.events,\n        rest = _objectWithoutProperties(ctx, [\"events\"]); // eslint-disable-line no-unused-vars\n\n\n    return rest;\n  };\n  /*\n   * Copyright 2018 The boardgame.io Authors\n   *\n   * Use of this source code is governed by a MIT-style\n   * license that can be found in the LICENSE file or at\n   * https://opensource.org/licenses/MIT.\n   */\n\n  /**\n   * Moves can return this when they want to indicate\n   * that the combination of arguments is illegal and\n   * the move ought to be discarded.\n   */\n\n\n  var INVALID_MOVE = 'INVALID_MOVE';\n  /**\n   * Context API to allow writing custom logs in games.\n   */\n\n  var GameLoggerCtxAPI =\n  /*#__PURE__*/\n  function () {\n    function GameLoggerCtxAPI() {\n      _classCallCheck(this, GameLoggerCtxAPI);\n\n      this._payload = undefined;\n    }\n\n    _createClass(GameLoggerCtxAPI, [{\n      key: \"_api\",\n      value: function _api() {\n        var _this = this;\n\n        return {\n          setPayload: function setPayload(payload) {\n            _this._payload = payload;\n          }\n        };\n      }\n    }, {\n      key: \"attach\",\n      value: function attach(ctx$$1) {\n        return _objectSpread({}, ctx$$1, {\n          log: this._api()\n        });\n      }\n    }, {\n      key: \"update\",\n      value: function update(state) {\n        if (this._payload === undefined) {\n          return state;\n        } // attach the payload to the last log event\n\n\n        var deltalog = state.deltalog;\n        deltalog[deltalog.length - 1] = _objectSpread({}, deltalog[deltalog.length - 1], {\n          payload: this._payload\n        });\n        this._payload = undefined;\n        return _objectSpread({}, state, {\n          deltalog: deltalog\n        });\n      }\n    }], [{\n      key: \"detach\",\n      value: function detach(ctx$$1) {\n        var log = ctx$$1.log,\n            ctxWithoutLog = _objectWithoutProperties(ctx$$1, [\"log\"]); // eslint-disable-line no-unused-vars\n\n\n        return ctxWithoutLog;\n      }\n    }]);\n\n    return GameLoggerCtxAPI;\n  }();\n  /**\n   * This class is used to attach/detach various utility objects\n   * onto a ctx, without having to manually attach/detach them\n   * all separately.\n   */\n\n\n  var ContextEnhancer =\n  /*#__PURE__*/\n  function () {\n    function ContextEnhancer(ctx$$1, game, player) {\n      _classCallCheck(this, ContextEnhancer);\n\n      this.random = new Random(ctx$$1);\n      this.events = new Events(game.flow, player);\n      this.log = new GameLoggerCtxAPI();\n    }\n\n    _createClass(ContextEnhancer, [{\n      key: \"attachToContext\",\n      value: function attachToContext(ctx$$1) {\n        var ctxWithAPI = this.random.attach(ctx$$1);\n        ctxWithAPI = this.events.attach(ctxWithAPI);\n        ctxWithAPI = this.log.attach(ctxWithAPI);\n        return ctxWithAPI;\n      }\n    }, {\n      key: \"_update\",\n      value: function _update(state, updateEvents) {\n        var newState = updateEvents ? this.events.update(state) : state;\n        newState = this.random.update(newState);\n        newState = this.log.update(newState);\n        return newState;\n      }\n    }, {\n      key: \"updateAndDetach\",\n      value: function updateAndDetach(state, updateEvents) {\n        var newState = this._update(state, updateEvents);\n\n        newState.ctx = ContextEnhancer.detachAllFromContext(newState.ctx);\n        return newState;\n      }\n    }], [{\n      key: \"detachAllFromContext\",\n      value: function detachAllFromContext(ctx$$1) {\n        var ctxWithoutAPI = Random.detach(ctx$$1);\n        ctxWithoutAPI = Events.detach(ctxWithoutAPI);\n        ctxWithoutAPI = GameLoggerCtxAPI.detach(ctxWithoutAPI);\n        return ctxWithoutAPI;\n      }\n    }]);\n\n    return ContextEnhancer;\n  }();\n  /**\n   * CreateGameReducer\n   *\n   * Creates the main game state reducer.\n   * @param {...object} game - Return value of Game().\n   * @param {...object} numPlayers - The number of players.\n   * @param {...object} multiplayer - Set to true if we are in a multiplayer client.\n   */\n\n\n  function CreateGameReducer(_ref2) {\n    var game = _ref2.game,\n        multiplayer = _ref2.multiplayer;\n    /**\n     * GameReducer\n     *\n     * Redux reducer that maintains the overall game state.\n     * @param {object} state - The state before the action.\n     * @param {object} action - A Redux action.\n     */\n\n    return function () {\n      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var action = arguments.length > 1 ? arguments[1] : undefined;\n\n      switch (action.type) {\n        case GAME_EVENT:\n          {\n            state = _objectSpread({}, state, {\n              deltalog: []\n            }); // Process game events only on the server.\n            // These events like `endTurn` typically\n            // contain code that may rely on secret state\n            // and cannot be computed on the client.\n\n            if (multiplayer) {\n              return state;\n            } // Ignore the event if the player isn't allowed to make it.\n\n\n            if (action.payload.playerID !== null && action.payload.playerID !== undefined && !game.flow.canPlayerCallEvent(state.G, state.ctx, action.payload.playerID)) {\n              return state;\n            }\n\n            var apiCtx = new ContextEnhancer(state.ctx, game, action.payload.playerID);\n            state.ctx = apiCtx.attachToContext(state.ctx);\n            var newState = game.flow.processGameEvent(state, action);\n            newState = apiCtx.updateAndDetach(newState, true);\n            return _objectSpread({}, newState, {\n              _stateID: state._stateID + 1\n            });\n          }\n\n        case MAKE_MOVE:\n          {\n            state = _objectSpread({}, state, {\n              deltalog: []\n            }); // Check whether the game knows the move at all.\n\n            if (!game.moveNames.includes(action.payload.type)) {\n              return state;\n            } // Ignore the move if it isn't allowed at this point.\n\n\n            if (!game.flow.canMakeMove(state.G, state.ctx, action.payload.type)) {\n              return state;\n            } // Ignore the move if the player isn't allowed to make it.\n\n\n            if (action.payload.playerID !== null && action.payload.playerID !== undefined && !game.flow.canPlayerMakeMove(state.G, state.ctx, action.payload.playerID)) {\n              return state;\n            }\n\n            var _apiCtx = new ContextEnhancer(state.ctx, game, action.payload.playerID);\n\n            var ctxWithAPI = _apiCtx.attachToContext(state.ctx); // Process the move.\n\n\n            var G$$1 = game.processMove(state.G, action.payload, ctxWithAPI);\n\n            if (G$$1 === INVALID_MOVE) {\n              // the game declared the move as invalid.\n              return state;\n            } // Create a log entry for this move.\n\n\n            var logEntry = {\n              action: action,\n              _stateID: state._stateID,\n              turn: state.ctx.turn,\n              phase: state.ctx.phase\n            }; // don't call into events here\n\n            var _newState = _apiCtx.updateAndDetach(_objectSpread({}, state, {\n              deltalog: [logEntry]\n            }), false);\n\n            var ctx$$1 = _newState.ctx; // Undo changes to G if the move should not run on the client.\n\n            if (multiplayer && !game.flow.optimisticUpdate(G$$1, ctx$$1, action.payload)) {\n              G$$1 = state.G;\n            }\n\n            state = _objectSpread({}, _newState, {\n              G: G$$1,\n              ctx: ctx$$1,\n              _stateID: state._stateID + 1\n            }); // If we're on the client, just process the move\n            // and no triggers in multiplayer mode.\n            // These will be processed on the server, which\n            // will send back a state update.\n\n            if (multiplayer) {\n              return state;\n            } // Allow the flow reducer to process any triggers that happen after moves.\n\n\n            ctxWithAPI = _apiCtx.attachToContext(state.ctx);\n            state = game.flow.processMove(_objectSpread({}, state, {\n              ctx: ctxWithAPI\n            }), action.payload);\n            state = _apiCtx.updateAndDetach(state, true);\n            state._undo[state._undo.length - 1].ctx = state.ctx;\n            return state;\n          }\n\n        case RESET:\n        case UPDATE:\n        case SYNC:\n          {\n            return action.state;\n          }\n\n        case UNDO:\n          {\n            var _state = state,\n                _undo = _state._undo,\n                _redo = _state._redo;\n\n            if (_undo.length < 2) {\n              return state;\n            }\n\n            var last = _undo[_undo.length - 1];\n            var restore = _undo[_undo.length - 2]; // Only allow undoable moves to be undone.\n\n            if (!game.flow.canUndoMove(state.G, state.ctx, last.moveType)) {\n              return state;\n            }\n\n            return _objectSpread({}, state, {\n              G: restore.G,\n              ctx: restore.ctx,\n              _undo: _undo.slice(0, _undo.length - 1),\n              _redo: [last].concat(_toConsumableArray(_redo))\n            });\n          }\n\n        case REDO:\n          {\n            var _state2 = state,\n                _undo2 = _state2._undo,\n                _redo2 = _state2._redo;\n\n            if (_redo2.length == 0) {\n              return state;\n            }\n\n            var first = _redo2[0];\n            return _objectSpread({}, state, {\n              G: first.G,\n              ctx: first.ctx,\n              _undo: [].concat(_toConsumableArray(_undo2), [first]),\n              _redo: _redo2.slice(1)\n            });\n          }\n\n        default:\n          {\n            return state;\n          }\n      }\n    };\n  }\n\n  var Bot =\n  /*#__PURE__*/\n  function () {\n    function Bot(_ref2) {\n      var _this = this;\n\n      var enumerate = _ref2.enumerate,\n          seed = _ref2.seed;\n\n      _classCallCheck(this, Bot);\n\n      _defineProperty(this, \"enumerate\", function (G, ctx, playerID) {\n        var actions = _this.enumerateFn(G, ctx, playerID);\n\n        return actions.map(function (a) {\n          if (a.payload !== undefined) {\n            return a;\n          }\n\n          if (a.move !== undefined) {\n            return makeMove(a.move, a.args, playerID);\n          }\n\n          if (a.event !== undefined) {\n            return gameEvent(a.event, a.args, playerID);\n          }\n        });\n      });\n\n      this.enumerateFn = enumerate;\n      this.seed = seed;\n    }\n\n    _createClass(Bot, [{\n      key: \"random\",\n      value: function random(arg) {\n        var number;\n\n        if (this.seed !== undefined) {\n          var r = null;\n\n          if (this.prngstate) {\n            r = new alea('', {\n              state: this.prngstate\n            });\n          } else {\n            r = new alea(this.seed, {\n              state: true\n            });\n          }\n\n          number = r();\n          this.prngstate = r.state();\n        } else {\n          number = Math.random();\n        }\n\n        if (arg) {\n          // eslint-disable-next-line unicorn/explicit-length-check\n          if (arg.length) {\n            var id = Math.floor(number * arg.length);\n            return arg[id];\n          } else {\n            return Math.floor(number * arg);\n          }\n        }\n\n        return number;\n      }\n    }]);\n\n    return Bot;\n  }();\n\n  var RandomBot =\n  /*#__PURE__*/\n  function (_Bot) {\n    _inherits(RandomBot, _Bot);\n\n    function RandomBot() {\n      _classCallCheck(this, RandomBot);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(RandomBot).apply(this, arguments));\n    }\n\n    _createClass(RandomBot, [{\n      key: \"play\",\n      value: function play(_ref3, playerID) {\n        var G = _ref3.G,\n            ctx = _ref3.ctx;\n        var moves = this.enumerate(G, ctx, playerID);\n        return {\n          action: this.random(moves)\n        };\n      }\n    }]);\n\n    return RandomBot;\n  }(Bot);\n\n  var MCTSBot =\n  /*#__PURE__*/\n  function (_Bot2) {\n    _inherits(MCTSBot, _Bot2);\n\n    function MCTSBot(_ref4) {\n      var _this2;\n\n      var enumerate = _ref4.enumerate,\n          seed = _ref4.seed,\n          objectives = _ref4.objectives,\n          game = _ref4.game,\n          iterations = _ref4.iterations,\n          playoutDepth = _ref4.playoutDepth;\n\n      _classCallCheck(this, MCTSBot);\n\n      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(MCTSBot).call(this, {\n        enumerate: enumerate,\n        seed: seed\n      }));\n\n      if (objectives === undefined) {\n        objectives = function objectives() {\n          return {};\n        };\n      }\n\n      _this2.objectives = objectives;\n      _this2.reducer = CreateGameReducer({\n        game: game\n      });\n      _this2.iterations = iterations || 1000;\n      _this2.playoutDepth = playoutDepth || 50;\n      return _this2;\n    }\n\n    _createClass(MCTSBot, [{\n      key: \"createNode\",\n      value: function createNode(_ref5) {\n        var state = _ref5.state,\n            parentAction = _ref5.parentAction,\n            parent = _ref5.parent,\n            playerID = _ref5.playerID;\n        var G = state.G,\n            ctx = state.ctx;\n        var actions = [];\n        var objectives = [];\n\n        if (playerID !== undefined) {\n          actions = this.enumerate(G, ctx, playerID);\n          objectives = this.objectives(G, ctx, playerID);\n        } else {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = ctx.actionPlayers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var _playerID = _step.value;\n              actions = actions.concat(this.enumerate(G, ctx, _playerID));\n              objectives = objectives.concat(this.objectives(G, ctx, _playerID));\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n\n        return {\n          // Game state at this node.\n          state: state,\n          // Parent of the node.\n          parent: parent,\n          // Move used to get to this node.\n          parentAction: parentAction,\n          // Unexplored actions.\n          actions: actions,\n          // Current objectives.\n          objectives: objectives,\n          // Children of the node.\n          children: [],\n          // Number of simulations that pass through this node.\n          visits: 0,\n          // Number of wins for this node.\n          value: 0\n        };\n      }\n    }, {\n      key: \"select\",\n      value: function select(node) {\n        // This node has unvisited children.\n        if (node.actions.length > 0) {\n          return node;\n        } // This is a terminal node.\n\n\n        if (node.children.length == 0) {\n          return node;\n        }\n\n        var selectedChild = null;\n        var best = 0.0;\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = node.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var child = _step2.value;\n            var childVisits = child.visits + Number.EPSILON;\n            var uct = child.value / childVisits + Math.sqrt(2 * Math.log(node.visits) / childVisits);\n\n            if (selectedChild == null || uct > best) {\n              best = uct;\n              selectedChild = child;\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        return this.select(selectedChild);\n      }\n    }, {\n      key: \"expand\",\n      value: function expand(node) {\n        var actions = node.actions;\n\n        if (actions.length == 0 || node.state.ctx.gameover !== undefined) {\n          return node;\n        }\n\n        var id = this.random(actions.length);\n        var action = actions[id];\n        node.actions.splice(id, 1);\n        var childState = this.reducer(node.state, action);\n        var childNode = this.createNode({\n          state: childState,\n          parentAction: action,\n          parent: node\n        });\n        node.children.push(childNode);\n        return childNode;\n      }\n    }, {\n      key: \"playout\",\n      value: function playout(node) {\n        var _this3 = this;\n\n        var state = node.state;\n\n        var _loop = function _loop(i) {\n          var _state = state,\n              G = _state.G,\n              ctx = _state.ctx;\n\n          var moves = _this3.enumerate(G, ctx, ctx.actionPlayers[0]); // Check if any objectives are met.\n\n\n          var objectives = _this3.objectives(G, ctx);\n\n          var score = Object.keys(objectives).reduce(function (score, key) {\n            var objective = objectives[key];\n\n            if (objective.checker(G, ctx)) {\n              return score + objective.weight;\n            }\n\n            return score;\n          }, 0.0); // If so, stop and return the score.\n\n          if (score > 0) {\n            return {\n              v: {\n                score: score\n              }\n            };\n          }\n\n          if (!moves || moves.length == 0) {\n            return {\n              v: undefined\n            };\n          }\n\n          var id = _this3.random(moves.length);\n\n          var childState = _this3.reducer(state, moves[id]);\n\n          state = childState;\n        };\n\n        for (var i = 0; i < this.playoutDepth && state.ctx.gameover === undefined; i++) {\n          var _ret = _loop(i);\n\n          if (_typeof(_ret) === \"object\") return _ret.v;\n        }\n\n        return state.ctx.gameover;\n      }\n    }, {\n      key: \"backpropagate\",\n      value: function backpropagate(node) {\n        var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        node.visits++;\n\n        if (result.score !== undefined) {\n          node.value += result.score;\n        }\n\n        if (result.draw === true) {\n          node.value += 0.5;\n        }\n\n        if (node.parentAction && result.winner === node.parentAction.payload.playerID) {\n          node.value++;\n        }\n\n        if (node.parent) {\n          this.backpropagate(node.parent, result);\n        }\n      }\n    }, {\n      key: \"play\",\n      value: function play(state, playerID) {\n        var root = this.createNode({\n          state: state,\n          playerID: playerID\n        });\n\n        for (var i = 0; i < this.iterations; i++) {\n          var leaf = this.select(root);\n          var child = this.expand(leaf);\n          var result = this.playout(child);\n          this.backpropagate(child, result);\n        }\n\n        var selectedChild = null;\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = root.children[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var _child = _step3.value;\n\n            if (selectedChild == null || _child.visits > selectedChild.visits) {\n              selectedChild = _child;\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n\n        var action = selectedChild && selectedChild.parentAction;\n        var metadata = root;\n        return {\n          action: action,\n          metadata: metadata\n        };\n      }\n    }]);\n\n    return MCTSBot;\n  }(Bot);\n  /*\n   * Copyright 2018 The boardgame.io Authors\n   *\n   * Use of this source code is governed by a MIT-style\n   * license that can be found in the LICENSE file or at\n   * https://opensource.org/licenses/MIT.\n   */\n\n\n  function AI(_ref) {\n    var bot = _ref.bot,\n        enumerate = _ref.enumerate,\n        visualize = _ref.visualize;\n\n    if (!bot) {\n      bot = MCTSBot;\n    }\n\n    return {\n      bot: bot,\n      enumerate: enumerate,\n      visualize: visualize\n    };\n  }\n  /*\n   * Copyright 2018 The boardgame.io Authors\n   *\n   * Use of this source code is governed by a MIT-style\n   * license that can be found in the LICENSE file or at\n   * https://opensource.org/licenses/MIT.\n   */\n\n\n  exports.AI = AI;\n  exports.RandomBot = RandomBot;\n  exports.MCTSBot = MCTSBot;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}